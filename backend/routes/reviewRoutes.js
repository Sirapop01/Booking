const express = require("express");
const {
    submitReview,
    getStadiumReviews,
    deleteReviewsByOwner,
    deleteReview
} = require("../controllers/reviewController");
const Review = require("../models/Review");
const router = express.Router();
const mongoose = require("mongoose"); 

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á
if (!submitReview || !getStadiumReviews || !deleteReviewsByOwner) {
    throw new Error("‚ùå Review Controller functions are missing!");
}

// ‚úÖ ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Controller)
router.post("/", submitReview);

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏° (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÑ‡∏î‡πâ)
router.get("/:stadiumId", getStadiumReviews); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

// ‚úÖ ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏° (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Controller)
router.delete("/reviews/owner/:ownerId", deleteReviewsByOwner);

router.get("/owner/:ownerId", async (req, res) => {
    try {
        const { ownerId } = req.params;
        console.log("üì° API ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô, ownerId:", ownerId);

        if (!mongoose.Types.ObjectId.isValid(ownerId)) {
            return res.status(400).json({ message: "‚ùå ownerId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°
        const reviews = await Review.find({ ownerId })
            .populate("userId", "firstName lastName")
            .populate("stadiumId", "fieldName") // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            .sort({ createdAt: -1 });

        console.log("üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å DB:", reviews);

        if (!reviews.length) {
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏ô‡∏µ‡πâ" });
        }

        res.status(200).json(reviews);
    } catch (error) {
        console.error("üö® Error fetching owner reviews:", error);
        res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ" });
    }
});

// ‚úÖ ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
router.delete("/:reviewId", deleteReview);


module.exports = router;
