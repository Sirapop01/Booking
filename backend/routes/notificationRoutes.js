const express = require("express");
const router = express.Router();
const mongoose = require("mongoose"); // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ mongoose
const BusinessOwner = require("../models/BusinessOwner"); // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á import Model ‡∏Ç‡∏≠‡∏á BusinessOwner
const BusinessInfoRequest = require("../models/BusinessInfoRequest");
const Arena = require("../models/Arena"); // ‚úÖ Import Arena Model
const { sendEmailNotification, sendApprovalEmail, sendRejectionEmail } = require("../controllers/notificationController");

// ‚úÖ Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á Email ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
router.post("/send-email", sendEmailNotification);
router.post("/notify/approve", sendApprovalEmail); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° API ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
router.post("/notify/reject", sendRejectionEmail);

// ‚úÖ Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏ô‡∏≤‡∏°
// ‚úÖ API ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏ô‡∏≤‡∏°
router.put("/approve/:id", async (req, res) => {
    try {
        const { id } = req.params;

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ message: "‚ùå ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô "approved"
        const owner = await BusinessOwner.findByIdAndUpdate(
            id,
            { status: "approved" },
            { new: true }
        );

        if (!owner) {
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°" });
        }

        // ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô BusinessInfoRequest
        const deletedRequest = await BusinessInfoRequest.findOneAndDelete({ businessOwnerId: id });

        if (!deletedRequest) {
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á" });
        }

        // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        await sendApprovalEmail(owner.email, owner.firstName);

        res.status(200).json({ message: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", owner });

    } catch (error) {
        res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ", error: error.message });
    }
});


// ‚úÖ API ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏ô‡∏≤‡∏°
router.delete("/reject/:id", async (req, res) => {
    try {
        const { id } = req.params;
        const { reason } = req.body;

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ message: "‚ùå ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô "rejected"
        const owner = await BusinessOwner.findByIdAndUpdate(
            id,
            { status: "rejected", rejectReason: reason },
            { new: true }
        );

        if (!owner) {
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°" });
        }

        // ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ô `BusinessInfoRequest`
        const deletedRequest = await BusinessInfoRequest.findOneAndDelete({ businessOwnerId: id });

        if (!deletedRequest) {
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á" });
        }

        // ‚úÖ ‡∏•‡∏ö `Arena` ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏ô‡∏µ‡πâ
        await Arena.deleteMany({ businessOwnerId: id });

        // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        await sendRejectionEmail(owner.email, owner.firstName, reason);

        res.status(200).json({ message: "üö´ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });

    } catch (error) {
        res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏î‡πâ", error: error.message });
    }
});


module.exports = router;
