const BusinessInfoRequest = require("../models/BusinessInfoRequest");
const BusinessInfo = require("../models/BusinessInfo");
const RejectedRequest = require("../models/RejectedRequest");
const BusinessOwner = require("../models/BusinessOwner");
const Arena = require('../models/Arena');
const jwt = require("jsonwebtoken");

// ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á BusinessInfoRequest
exports.submitBusinessRequest = async (req, res) => {
    try {
        console.log("üì© Data received from Frontend:", req.body); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å Frontend

        const { accountName, bank, accountNumber, businessOwnerId, images } = req.body;

        if (!accountName || !bank || !accountNumber || !businessOwnerId || !images) {
            return res.status(400).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ businessOwnerId ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const ownerExists = await BusinessOwner.findById(businessOwnerId);
        if (!ownerExists) {
            return res.status(400).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ô‡∏µ‡πâ" });
        }

        const newRequest = new BusinessInfoRequest({
            accountName,
            bank,
            accountNumber,
            businessOwnerId,
            images,
            status: "pending",
            createdAt: new Date(),
        });

        await newRequest.save();
        console.log("‚úÖ Request saved to MongoDB:", newRequest); 

        res.status(201).json({ message: "‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", request: newRequest });

    } catch (error) {
        console.error("üö® Error saving request:", error);
        res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", error: error.message });
    }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (`status: pending`)
exports.getPendingRequests = async (req, res) => {
    try {
        const requests = await BusinessInfoRequest.find({ status: "pending" })
            .populate("businessOwnerId", "firstName lastName email idCard phoneNumber"); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°
        res.status(200).json(requests);
    } catch (error) {
        console.error("üö® Error fetching pending requests:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", error: error.message });
    }
};

// ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ BusinessInfo
exports.approveRequest = async (req, res) => {
    try {
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (Admin ‡∏´‡∏£‡∏∑‡∏≠ Superadmin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) return res.status(401).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Token" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        if (decoded.role !== "admin" && decoded.role !== "superadmin") {
            return res.status(403).json({ message: "üö´ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á" });
        }

        const request = await BusinessInfoRequest.findById(req.params.id);
        if (!request) {
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠" });
        }

        // ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ BusinessInfo
        const approvedBusiness = new BusinessInfo({
            accountName: request.accountName,
            bank: request.bank,
            accountNumber: request.accountNumber,
            businessOwnerId: request.businessOwnerId,
            images: request.images,
            createdAt: new Date(),
        });

        await approvedBusiness.save(); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á `businessinfos`
        await BusinessInfoRequest.findByIdAndDelete(req.params.id); // ‚úÖ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `businessInfoRequests`

        console.log(`‚úÖ ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á ${req.params.id} ‡∏ñ‡∏π‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ BusinessInfo`);

        res.status(200).json({ message: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á BusinessInfo" });

    } catch (error) {
        console.error("üö® Error approving request:", error);
        res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", error: error.message });
    }
};

// ‚úÖ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
exports.rejectRequest = async (req, res) => {
    try {
        const { reason } = req.body;
        const requestId = req.params.id;

        console.log("üì© Reject Request Received:", requestId, "Reason:", reason);

        if (!reason) {
            return res.status(400).json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò" });
        }

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
        const request = await BusinessInfoRequest.findById(requestId);
        if (!request) {
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠" });
        }

        const businessOwnerId = request.businessOwnerId; // ‚úÖ ‡∏î‡∏∂‡∏á `businessOwnerId`
        console.log("üîç businessOwnerId ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°:", businessOwnerId);

        // ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Collection `RejectedRequests`
        const rejectedData = new RejectedRequest({
            accountName: request.accountName,
            bank: request.bank,
            accountNumber: request.accountNumber,
            businessOwnerId: businessOwnerId,
            images: request.images,
            rejectReason: reason
        });
        await rejectedData.save();

        // ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `businessInfoRequests`
        await BusinessInfoRequest.findByIdAndDelete(requestId);

        // ‚úÖ ‡∏•‡∏ö Arena ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á `businessOwnerId`
        const relatedArenas = await Arena.find({ businessOwnerId });
        console.log("üîç ‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:", relatedArenas);

        if (relatedArenas.length > 0) {
            const deletedArenas = await Arena.deleteMany({ businessOwnerId });
            console.log("‚úÖ ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:", deletedArenas.deletedCount, "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
        } else {
            console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö ownerId:", businessOwnerId);
        }

        res.status(200).json({ message: "üö´ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡πâ" });

    } catch (error) {
        console.error("üö® Error rejecting request:", error);
        res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á", error: error.message });
    }
};
