const nodemailer = require("nodemailer");
const BusinessOwner = require("../models/BusinessOwner"); // тЬЕ Import Model р╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З
require("dotenv").config();

// тЬЕ р╣Гр╕Кр╣Й Google App Password р╣Бр╕Чр╕Щр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Ыр╕Бр╕Хр╕┤
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS, // тЬЕ р╕Хр╣Йр╕нр╕Зр╣Ар╕Ыр╣Зр╕Щ App Password
  },
});

// тЬЕ р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╣Ир╕Зр╕нр╕╡р╣Ар╕бр╕е
exports.sendEmailNotification = async (req, res) => {
  const { email } = req.body;

  if (!email) return res.status(400).json({ message: "р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕░р╕Ър╕╕ Email" });

  try {
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "р╕Бр╕▓р╕гр╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╕кр╕│р╣Ар╕гр╣Зр╕И",
      text: "р╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Чр╕╡р╣Ир╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╕Бр╕▒р╕Ър╣Ар╕гр╕▓! р╕Бр╕гр╕╕р╕Ур╕▓р╕Бр╕гр╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕Щр╕▓р╕бр╕Вр╕нр╕Зр╕Др╕╕р╕У.",
    };

    await transporter.sendMail(mailOptions);
    res.status(200).json({ message: "тЬЕ Email sent successfully!" });

  } catch (error) {
    console.error("тЭМ Error sending email:", error);
    res.status(500).json({ message: "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╣Ир╕З Email р╣Др╕Фр╣Й", error: error.message });
  }
};

// тЬЕ р╕кр╣Ир╕Зр╕нр╕╡р╣Ар╕бр╕ер╣Ар╕бр╕╖р╣Ир╕нр╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤
exports.sendApprovalEmail = async (email, ownerName) => {
  try {
      const mailOptions = {
          from: process.env.EMAIL_USER,
          to: email,
          subject: `тЬЕ р╕кр╕Щр╕▓р╕бр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤`,
          text: `р╕Вр╕нр╣Бр╕кр╕Фр╕Зр╕Др╕зр╕▓р╕бр╕вр╕┤р╕Щр╕Фр╕╡! р╕Др╕╕р╕У ${ownerName} р╕кр╕Щр╕▓р╕бр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕нр╕Щр╕╕р╕бр╕▒р╕Хр╕┤р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з`
      };

      await transporter.sendMail(mailOptions);
  } catch (error) {
      console.error("тЭМ Error sending approval email:", error);
  }
};

// тЭМ р╕кр╣Ир╕Зр╕нр╕╡р╣Ар╕бр╕ер╣Ар╕бр╕╖р╣Ир╕нр╕Ыр╕Пр╕┤р╣Ар╕кр╕Ш
exports.sendRejectionEmail = async (email, ownerName, reason) => {
  try {
      const mailOptions = {
          from: process.env.EMAIL_USER,
          to: email,
          subject: `ЁЯЪл р╕кр╕Щр╕▓р╕бр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕Цр╕╣р╕Бр╕Ыр╕Пр╕┤р╣Ар╕кр╕Ш`,
          text: `р╣Ар╕гр╕╡р╕вр╕Щр╕Др╕╕р╕У ${ownerName},\n\nр╕Вр╕нр╕нр╕ар╕▒р╕в р╕кр╕Щр╕▓р╕бр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕Цр╕╣р╕Бр╕Ыр╕Пр╕┤р╣Ар╕кр╕Шр╣Ар╕Щр╕╖р╣Ир╕нр╕Зр╕Ир╕▓р╕Б: ${reason} \n\nр╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕ер╕░р╕кр╣Ир╕Зр╕Др╕│р╕Вр╕нр╣Гр╕лр╕бр╣Ир╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г`
      };

      await transporter.sendMail(mailOptions);
  } catch (error) {
      console.error("тЭМ Error sending rejection email:", error);
  }
};

