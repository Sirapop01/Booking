const jwt = require("jsonwebtoken");
const BookingHistory = require("../models/BookingHistory");
const SubStadium = require("../models/subStadiumModel");
const BusinessInfo = require("../models/BusinessInfo");
const Payment = require("../models/Payment");
const Arena = require("../models/Arena");
const { ObjectId } = require("mongoose").Types; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ ObjectId


exports.getPendingPayment = async (req, res) => {
  try {
      console.log("üìå Headers ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Client:", req.headers);

      const token = req.headers.authorization?.split(" ")[1];
      if (!token) {
          return res.status(401).json({ message: "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Token" });
      }

      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      let userId = decoded.id;

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userId ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      try {
          userId = new ObjectId(userId);
      } catch (err) {
          console.log("‚ö† userId ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡πÑ‡∏î‡πâ, ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°");
      }

      console.log("‚úÖ Token ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, User ID:", userId);

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö sessionId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const { sessionId } = req.query;
      let bookingQuery = {
          userId: userId,
          status: "pending",
      };

      if (sessionId) {
          bookingQuery.sessionId = { $regex: `^${sessionId}$`, $options: "i" };
      }

      console.log("üìå Query ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô BookingHistory:", bookingQuery);

      const booking = await BookingHistory.findOne(bookingQuery)
          .select("details totalPrice expiresAt sessionId stadiumId ownerId fieldName")
          .lean();

      if (!booking) {
          console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!");
          return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" });
      }

      console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö:", booking);

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const subStadiumIds = booking.details.map(detail => detail.subStadiumId);
      const subStadiums = await SubStadium.find({ _id: { $in: subStadiumIds } }).lean();

      console.log("‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°:", subStadiums.length > 0 ? subStadiums : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°");

      // ‚úÖ ‡∏î‡∏∂‡∏á `owner_id` ‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á
      const ownerId = booking.ownerId || subStadiums[0]?.owner_id;
      
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°
      const businessInfo = await BusinessInfo.findOne({ businessOwnerId: ownerId }).lean();

      console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à:", businessInfo ? businessInfo : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à");

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Arena
      const arenaInfo = await Arena.findOne({ _id: booking.stadiumId }).lean();

      console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤ (Arena):", arenaInfo ? arenaInfo : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Arena");

      // ‚úÖ ‡∏™‡πà‡∏á Response ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î `404` ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
      res.status(200).json({
          booking,
          stadiumInfo: subStadiums.length > 0 ? subStadiums : null,
          bankInfo: businessInfo || null,  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á `null` ‡πÅ‡∏ó‡∏ô
          arenaInfo: arenaInfo || null, // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á `null` ‡πÅ‡∏ó‡∏ô
      });

  } catch (error) {
      console.error("‚ùå Error fetching payment details:", error);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};



exports.submitPayment = async (req, res) => {
    try {
      const token = req.headers.authorization?.split(" ")[1];
      if (!token) {
        return res.status(401).json({ message: "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Token" });
      }
  
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const userId = decoded.id;
      const { sessionId, amount, transferTime } = req.body;
  
      if (!req.file) {
        return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" });
      }

      const slipImage = req.file ? req.file.path : null;
  
      // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      const booking = await BookingHistory.findOne({ sessionId, userId });
      if (!booking) {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á" });
      }
  
      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Database
      const newPayment = new Payment({
        userId,
        sessionId,
        bookingId: booking._id,
        amount,
        transferTime,
        slipImage, 
        status: "paid",
        details: booking.details, // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      });
  
      await newPayment.save();
  
      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Booking ‡πÄ‡∏õ‡πá‡∏ô "paid"
      await BookingHistory.findOneAndUpdate({ sessionId }, { status: "paid" });
  
      res.status(201).json({ message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", payment: newPayment });
    } catch (error) {
      console.error("‚ùå Error processing payment:", error);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
  };
