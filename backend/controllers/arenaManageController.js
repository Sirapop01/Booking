const Arena = require("../models/Arena");
const upload = require("../config/multerCloudinaryConfig");
const multer = require("multer");
const cloudinary = require("cloudinary").v2; // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á require ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
const fs = require("fs");

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
const registerArena = async (req, res) => {
    try {
        const newArena = new Arena({
            fieldName: req.body.fieldName,
            ownerName: req.body.ownerName,
            phone: req.body.phone,
            startTime: req.body.startTime,
            endTime: req.body.endTime,
            location: JSON.parse(req.body.location),
            businessOwnerId: req.body.businessOwnerId,
            additionalInfo: req.body.additionalInfo,
            amenities: JSON.parse(req.body.amenities),
            images: req.files ? req.files.map(file => file.path) : [],
        });

        const savedArena = await newArena.save();
        res.status(201).json(savedArena);
    } catch (error) {
        console.error("‚ùå Error registering arena:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", error });
    }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏ï‡∏≤‡∏° ID
const getArenaById = async (req, res) => {
    try {
        const arena = await Arena.findById(req.params.arenaId);
        if (!arena) return res.status(404).json({ message: "Arena not found" });
        res.status(200).json(arena);
    } catch (error) {
        console.error("‚ùå Error fetching arena:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", error });
    }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°
const updateArena = async (req, res) => {
    try {
        const { arenaId } = req.params;
        const { fieldName, ownerName, phone, startTime, endTime, location, additionalInfo, amenities } = req.body;

        if (!arenaId) {
            return res.status(400).json({ message: "Arena ID is required" });
        }

        console.log("üõ† Updating Arena:", arenaId);

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Arena ‡πÄ‡∏î‡∏¥‡∏°
        const existingArena = await Arena.findById(arenaId);
        if (!existingArena) {
            return res.status(404).json({ message: "Arena not found" });
        }

        let newImages = existingArena.images; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏°

        if (req.files && req.files.length > 0) {
            console.log("üóëÔ∏è Deleting old images from Cloudinary...");

            // ‚úÖ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å Cloudinary ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            for (const oldImage of existingArena.images) {
                try {
                    if (oldImage.startsWith("http")) { // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á Cloudinary
                        const publicId = oldImage.split("/").pop().split(".")[0]; // ‡∏î‡∏∂‡∏á `public_id` ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°
                        await cloudinary.uploader.destroy(`stadium-images/${publicId}`);
                        console.log("üóëÔ∏è Deleted old image:", publicId);
                    }
                } catch (err) {
                    console.error("‚ùå Error deleting image from Cloudinary:", err);
                }
            }

            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary
            console.log("üì§ Uploading new images to Cloudinary...");
            const uploadPromises = req.files.map(async (file) => {
                const result = await cloudinary.uploader.upload(file.path, { folder: "stadium-images" });

                // ‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
                if (fs.existsSync(file.path)) {
                    fs.unlinkSync(file.path);
                }

                return result.secure_url;
            });

            newImages = await Promise.all(uploadPromises);
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `location` ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô parse
        let parsedLocation;
        try {
            parsedLocation = location ? JSON.parse(location) : existingArena.location;
        } catch (err) {
            return res.status(400).json({ message: "Invalid location format" });
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB
        const updatedArena = await Arena.findByIdAndUpdate(
            arenaId,
            {
                fieldName,
                ownerName,
                phone,
                startTime,
                endTime,
                location: parsedLocation,
                additionalInfo,
                amenities: JSON.parse(amenities || "[]"), // ‡∏ñ‡πâ‡∏≤ `amenities` ‡πÄ‡∏õ‡πá‡∏ô undefined ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ []
                images: newImages, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            },
            { new: true }
        );

        console.log("‚úÖ Arena Updated Successfully:", updatedArena);
        res.status(200).json(updatedArena);
    } catch (error) {
        console.error("‚ùå Error updating arena:", error);
        res.status(500).json({ message: "Server Error", error });
    }
};

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
module.exports = {
    registerArena,
    getArenaById,
    updateArena,
};
