const FavoriteArena = require("../models/favoriteModel");

// üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Favorite Arenas
exports.getFavorites = async (req, res) => {
    try {
        const userId = req.query.userId;
        if (!userId) {
            return res.status(400).json({ error: "userId is required" });
        }

        console.log("üîç Fetching favorites for userId:", userId);

        // ‚úÖ ‡πÉ‡∏ä‡πâ populate() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á fieldName ‡∏à‡∏≤‡∏Å stadiumId
        const favorites = await FavoriteArena.find({ userId })
            .populate({
                path: "stadiumId",
                select: "fieldName images"
            })
            .lean();

        // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ fieldName ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å
        const updatedFavorites = favorites.map(fav => ({
            _id: fav._id,
            userId: fav.userId,
            stadiumId: fav.stadiumId._id,
            fieldName: fav.stadiumId.fieldName, // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°‡∏à‡∏≤‡∏Å stadiumId
            stadiumImage: fav.stadiumId.images?.length > 0 ? fav.stadiumId.images[0] : null,
            createdAt: fav.createdAt
        }));

        console.log("‚úÖ Found Favorites:", updatedFavorites);
        res.status(200).json(updatedFavorites);
    } catch (error) {
        console.error("‚ùå Error fetching favorites:", error.message);
        res.status(500).json({ error: "Internal Server Error" });
    }
};



// üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
exports.addFavorite = async (req, res) => {   
    try {
        console.log("üìå Data received in addFavorite:", req.body); // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô backend
        
        const { userId, stadiumId } = req.body;
        if (!userId || !stadiumId) {
            return res.status(400).json({ error: "userId ‡πÅ‡∏•‡∏∞ stadiumId ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ" });
        }

        const existingFavorite = await FavoriteArena.findOne({ userId, stadiumId });
        if (existingFavorite) {
            return res.status(400).json({ error: "‡∏™‡∏ô‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß" });
        }

        const newFavorite = new FavoriteArena({ userId, stadiumId });
        await newFavorite.save();
        res.status(201).json(newFavorite);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
};




// üìå ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ userId ‡πÅ‡∏•‡∏∞ stadiumId
exports.removeFavorite = async (req, res) => {
    try {
        const userId = req.query.userId || req.body.userId; // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á query ‡πÅ‡∏•‡∏∞ body
        const { stadiumId } = req.params;

        if (!userId || !stadiumId) {
            return res.status(400).json({ error: "userId ‡πÅ‡∏•‡∏∞ stadiumId ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ" });
        }

        const deletedFavorite = await FavoriteArena.findOneAndDelete({ userId, stadiumId });

        if (!deletedFavorite) {
            return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
        }

        res.json({ message: "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
    } catch (error) {
        console.error("‚ùå Error removing favorite:", error.message);
        res.status(500).json({ error: "Internal Server Error" });
    }
};



// üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ô‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
exports.checkFavoriteStatus = async (req, res) => {
    try {
        const { userId } = req.query;
        const stadiumId = req.params.stadiumId;

        if (!userId || !stadiumId) {
            return res.status(400).json({ error: "userId ‡πÅ‡∏•‡∏∞ stadiumId ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ" });
        }

        const favorite = await FavoriteArena.findOne({ userId, stadiumId });
        res.status(200).json({ isFavorite: !!favorite }); // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ true ‡∏´‡∏£‡∏∑‡∏≠ false ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
        console.error("‚ùå Error checking favorite status:", error.message);
        res.status(500).json({ error: "Internal Server Error" });
    }
};



