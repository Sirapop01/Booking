const BookingHistory = require("../models/BookingHistory");
const Arena = require("../models/Arena");
const jwt = require("jsonwebtoken");

// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
exports.addBookingHistory = async (req, res) => {
    try {
        const { userId, stadiumId, ownerId, bookingDate, status } = req.body;

        if (!userId || !stadiumId || !ownerId || !bookingDate) {
            return res.status(400).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
        }

        const newBooking = new BookingHistory({
            userId,
            stadiumId,
            ownerId,
            bookingDate,
            status: status || "completed",
        });

        await newBooking.save();

        res.status(201).json({ message: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", booking: newBooking });

    } catch (error) {
        console.error("üö® Error adding booking history:", error);
        res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏à‡∏≠‡∏á 
exports.getUserBookingHistory = async (req, res) => {
    try {
        const { userId } = req.query;

        if (!userId) {
            return res.status(400).json({ message: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId" });
        }

        console.log("üîç Fetching booking history for userId:", userId);

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á `fieldName` ‡πÅ‡∏•‡∏∞ `images`
        let bookings = await BookingHistory.find({ userId })
            .populate({
                path: "stadiumId",
                select: "fieldName images",
                options: { strictPopulate: false }
            })
            .lean(); // ‚úÖ ‡πÉ‡∏ä‡πâ lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ MongoDB ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Object  

        console.log("üìå Raw bookings from DB:", bookings);

        // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ô‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á `images[0]` ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        const updatedBookings = bookings
            .filter(booking => booking.stadiumId) // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ô‡∏≤‡∏°
            .map(booking => ({
                _id: booking._id,
                userId: booking.userId,
                stadiumId: booking.stadiumId._id,
                fieldName: booking.stadiumId.fieldName || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°",
                stadiumImage: booking.stadiumId.images?.[0] || "https://via.placeholder.com/150",
                sportName: booking.sportName,
                timeRange: booking.timeRange,
                bookingDate: booking.bookingDate,
                status: booking.status
            }));

        console.log("‚úÖ Processed Booking History:", updatedBookings);
        res.status(200).json(updatedBookings);

    } catch (error) {
        console.error("‚ùå Error fetching booking history:", error.message);
        res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    }
};







