const Booking = require("../models/Booking");

// ‚úÖ API: ‡∏î‡∏∂‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
exports.getReservedSlots = async (req, res) => {
    try {
        const { subStadiumId, date } = req.query;

        if (!subStadiumId || !date) {
            return res.status(400).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö (subStadiumId ‡∏´‡∏£‡∏∑‡∏≠ date ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)" });
        }

        console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß: subStadiumId=${subStadiumId}, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà=${date}`);

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `bookingDate` ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏£‡πâ‡πÄ‡∏ß‡∏•‡∏≤
        const searchDate = new Date(date);
        searchDate.setHours(0, 0, 0, 0);

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô
        const bookings = await Booking.find({
            subStadiumId,
            bookingDate: searchDate,
        }).select("timeRange");

        console.log("üìå ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß:", bookings);

        // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Array)
        const reservedSlots = bookings.flatMap((b) => b.timeRange);

        res.status(200).json({ reservedSlots });
    } catch (error) {
        console.error("üö® Error fetching reserved slots:", error);
        res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
    }
};

// ‚úÖ API: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
exports.createBooking = async (req, res) => {
    try {
        const { userId, stadiumId, subStadiumId, bookingDate, timeRange } = req.body;

        if (!userId || !stadiumId || !subStadiumId || !bookingDate || !timeRange) {
            return res.status(400).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á" });
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `timeRange` ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!Array.isArray(timeRange) || timeRange.length === 0) {
            return res.status(400).json({ message: "‚ùå timeRange ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Array ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
        }

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `bookingDate` ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏£‡πâ‡πÄ‡∏ß‡∏•‡∏≤
        const searchDate = new Date(bookingDate);
        searchDate.setHours(0, 0, 0, 0);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingBookings = await Booking.find({
            subStadiumId,
            bookingDate: searchDate,
            timeRange: { $in: timeRange }, // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏´‡∏ô‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        });

        if (existingBookings.length > 0) {
            return res.status(400).json({ message: "‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà" });
        }

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        const newBooking = new Booking({
            userId,
            stadiumId,
            subStadiumId,
            bookingDate: searchDate, // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô Date Object ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤
            timeRange,
        });

        await newBooking.save();
        res.status(201).json({ message: "‚úÖ ‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", booking: newBooking });

    } catch (error) {
        console.error("üö® Error creating booking:", error);
        res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏î‡πâ" });
    }
};
