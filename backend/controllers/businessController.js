const User = require("../models/User"); // Import User Model
const BusinessOwner = require("../models/BusinessOwner"); // Import BusinessOwner Model
const bcrypt = require("bcryptjs");
require("dotenv").config();
const nodemailer = require("nodemailer");


exports.registerBusinessOwner = async (req, res) => {
    try {
        console.log("üì© Data received from Frontend:", req.body);

        const { email, password, firstName, lastName, phoneNumber, idCard, dob, role, acceptTerms } = req.body;

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á `users` ‡πÅ‡∏•‡∏∞ `businessowners`
        const [existingUser, existingOwner] = await Promise.all([
            User.findOne({ email }), // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô Collection `users`
            BusinessOwner.findOne({ email }) // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô Collection `businessowners`
        ]);

        if (existingUser || existingOwner) {
            return res.status(400).json({
                success: false,
                message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö!"
            });
        }

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ `idCard` ‡∏ß‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingIdCard = await BusinessOwner.findOne({ idCard });
        if (existingIdCard) {
            return res.status(400).json({
                success: false,
                message: "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!"
            });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const newOwner = new BusinessOwner({
            email, password: hashedPassword, firstName, lastName, phoneNumber, idCard, dob, role, acceptTerms
        });

        console.log("‚úÖ Creating new BusinessOwner:", newOwner);
        await newOwner.save();
        console.log("üéâ Data saved successfully!");

        res.status(201).json({
            success: true,
            message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥!"
        });

    } catch (error) {
        console.error("üö® Error in register API:", error);
        res.status(500).json({
            success: false,
            message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
            error: error.message
        });
    }
};

// ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ BusinessOwner ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å `id` ‡∏´‡∏£‡∏∑‡∏≠ `email`
exports.findBusinessOwner = async (req, res) => {
    try {
      const { id, email } = req.query;
  
      if (!id && !email) {
        return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà ID ‡∏´‡∏£‡∏∑‡∏≠ Email" });
      }
  
      let query = {};
      if (id) query._id = id; // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° `id`
      if (email) query.email = email; // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° `email`
  
      const owner = await BusinessOwner.findOne(query);
  
      if (!owner) {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à" });
      }
  
      res.json({ 
        businessOwnerId: owner._id, 
        email: owner.email, 
        name: `${owner.firstName} ${owner.lastName}` 
      });
  
    } catch (error) {
      console.error("‚ùå Error fetching BusinessOwner:", error);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
    }
  };

  exports.getMB = async (req, res) => {
    console.log("‚úÖ GET Member Requested:", req.params.id);
    try {
      const BusinessData = await BusinessOwner.findById(req.params.id);  // ‚úÖ ‡πÉ‡∏ä‡πâ findById() ‡πÅ‡∏ó‡∏ô findOne()
  
      if (!BusinessData) {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
      }
  
      return res.status(200).json(BusinessData);
    } catch (error) {
      console.error("‚ùå Error fetching user data:", error);
      return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
  };

  exports.updateUser = async (req, res) => {
    try {
      const { id } = req.params; // ‡∏£‡∏±‡∏ö ID ‡∏à‡∏≤‡∏Å URL
      const updateData = req.body; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
  
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingUser = await BusinessOwner.findById(id);
      if (!existingUser) {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
      }
  
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const updatedUser = await BusinessOwner.findByIdAndUpdate(id, updateData, { new: true });
  
      return res.status(200).json({
        message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        user: updatedUser,
      });
    } catch (error) {
      console.error("‚ùå Error updating user:", error);
      return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
  };
  
  
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });
  
  // ‚úÖ API ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå Reset Password ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
  exports.sendResetPasswordEmail = async (req, res) => {
    const { email } = req.body;
  
    try {
      const BusinessOwner = await BusinessOwner.findOne({ email });
  
      if (!BusinessOwner) {
        return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
      }
  
      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 15 ‡∏ô‡∏≤‡∏ó‡∏µ
      const resetToken = jwt.sign({ id: BusinessOwner._id }, process.env.JWT_SECRET, { expiresIn: "15m" });
  
      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå Reset Password ‡πÇ‡∏î‡∏¢‡πÅ‡∏ô‡∏ö Token
      const resetLink = `http://localhost:3000/reset-password/${resetToken}`;
  
      // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: "üîë ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        html: `<p>‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</p>
               <p>‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà:</p>
               <a href="${resetLink}" target="_blank">${resetLink}</a>
               <p>‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ</p>`,
      };
  
      await transporter.sendMail(mailOptions);
      return res.status(200).json({ message: "‚úÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" });
  
    } catch (error) {
      console.error("‚ùå Error sending reset password email:", error);
      return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•" });
    }
  };
  
  // ‚úÖ API ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  exports.resetPassword = async (req, res) => {
    const { token } = req.params;
    const { newPassword } = req.body;
  
    try {
      // ‚úÖ ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ Token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á userId
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const userId = decoded.id;
  
      // ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
      const hashedPassword = await bcrypt.hash(newPassword, 10);
  
      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await BusinessOwner.findByIdAndUpdate(userId, { password: hashedPassword });
  
      return res.status(200).json({ message: "‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  
    } catch (error) {
      console.error("‚ùå Error resetting password:", error);
      return res.status(400).json({ message: "‚ùå ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }
  };
