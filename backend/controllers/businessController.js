const User = require("../models/User"); // Import User Model
const BusinessOwner = require("../models/BusinessOwner"); // Import BusinessOwner Model
const bcrypt = require("bcryptjs");

exports.registerBusinessOwner = async (req, res) => {
    try {
        console.log("üì© Data received from Frontend:", req.body);

        const { email, password, firstName, lastName, phoneNumber, idCard, dob, role, acceptTerms } = req.body;

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á `users` ‡πÅ‡∏•‡∏∞ `businessowners`
        const [existingUser, existingOwner] = await Promise.all([
            User.findOne({ email }), // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô Collection `users`
            BusinessOwner.findOne({ email }) // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô Collection `businessowners`
        ]);

        if (existingUser || existingOwner) {
            return res.status(400).json({
                success: false,
                message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö!"
            });
        }

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ `idCard` ‡∏ß‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingIdCard = await BusinessOwner.findOne({ idCard });
        if (existingIdCard) {
            return res.status(400).json({
                success: false,
                message: "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!"
            });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const newOwner = new BusinessOwner({
            email, password: hashedPassword, firstName, lastName, phoneNumber, idCard, dob, role, acceptTerms
        });

        console.log("‚úÖ Creating new BusinessOwner:", newOwner);
        await newOwner.save();
        console.log("üéâ Data saved successfully!");

        res.status(201).json({
            success: true,
            message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥!"
        });

    } catch (error) {
        console.error("üö® Error in register API:", error);
        res.status(500).json({
            success: false,
            message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
            error: error.message
        });
    }
};
