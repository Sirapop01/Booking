const jwt = require("jsonwebtoken");
const Chat = require("../models/Chat");
const User = require("../models/User");
require("dotenv").config(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ ENV

const JWT_SECRET = process.env.JWT_SECRET || "MatchWeb"; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô ENV

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin
const verifyAdmin = (req) => {
  const token = req.header("Authorization");
  console.log("üîç Token received in Backend:", token); // Debug Token
  
  if (!token) throw new Error("Access Denied! No token provided.");

  try {
    const decoded = jwt.verify(token.replace("Bearer ", ""), JWT_SECRET); // ‚úÖ ‡πÉ‡∏ä‡πâ JWT_SECRET ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    console.log("‚úÖ Token Decoded:", decoded);

    if (decoded.role !== "admin" && decoded.role !== "superadmin") {
      throw new Error("Permission Denied! Admin only.");
    }
    return decoded;
  } catch (error) {
    console.error("‚ùå Token verification failed:", error.message);
    throw new Error("Invalid Token!");
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ä‡∏ó (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
exports.getUsersWithChat = async (req, res) => {
  try {
    console.log("üì° API /chat-users called");
    const users = await Chat.aggregate([
      { $group: { _id: "$userId" } },
      {
        $lookup: {
          from: "users", 
          localField: "_id",
          foreignField: "_id",
          as: "userData"
        }
      },
      { $unwind: "$userData" },
      {
        $project: {
          _id: "$userData._id",
          firstName: "$userData.firstName",
          lastName: "$userData.lastName",
          email: "$userData.email"
        }
      }
    ]);

    console.log("‚úÖ Users found:", users);
    res.json(users);
  } catch (error) {
    console.error("‚ùå Error in /chat-users:", error.message);
    res.status(500).json({ error: error.message });
  }
};


// ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
exports.getChatHistory = async (req, res) => {
  try {
    const admin = verifyAdmin(req); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    console.log(`üîç Admin ${admin.id} is fetching chat history for user ${req.params.userId}`);

    const { userId } = req.params;

    const messages = await Chat.find({ userId })
      .populate("userId", "firstName lastName email") // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
      .populate("adminId", "firstName lastName email")
      .sort("timestamp");

    if (!messages.length) {
      console.warn("‚ö†Ô∏è No chat history found for user:", userId);
      return res.status(404).json({ error: "No chat history found." });
    }

    res.json(messages);
  } catch (error) {
    console.error("‚ùå Error fetching chat history:", error.message);
    res.status(500).json({ error: error.message });
  }
};

// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
exports.sendMessage = async (req, res) => {
  try {
    const admin = verifyAdmin(req); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    console.log(`‚úâÔ∏è Admin ${admin.id} is sending a message to user ${req.params.userId}`);

    const { userId } = req.params;
    const { sender, content } = req.body;

    const userExists = await User.findById(userId);
    if (!userExists) {
      console.warn("‚ö†Ô∏è User not found:", userId);
      return res.status(404).json({ error: "User not found." });
    }

    if (!content || content.trim() === "") {
      console.warn("‚ö†Ô∏è Message content is empty.");
      return res.status(400).json({ error: "Message content cannot be empty." });
    }

    const newMessage = new Chat({
      userId,
      adminId: admin.id, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° adminId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á Admin ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      sender,
      content,
    });

    await newMessage.save();
    console.log("‚úÖ Message sent:", newMessage);

    res.json(newMessage);
  } catch (error) {
    console.error("‚ùå Error sending message:", error.message);
    res.status(500).json({ error: error.message });
  }
};