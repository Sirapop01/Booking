const Chat = require("../models/Chat");
const SuperAdmin = require("../models/SuperAdmin");
const Admin = require("../models/Admin");
const User = require("../models/User");
const BusinessOwner = require("../models/BusinessOwner");
const mongoose = require("mongoose");

// üìå 1. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (User ‚Üí Admin Group)
exports.sendMessage = async (req, res) => {
  try {
    let { senderId, senderModel, senderRole, message } = req.body;

    if (!senderId || !message) {
      return res.status(400).json({ success: false, message: "Missing required fields" });
    }

    const newMessage = new Chat({
      senderId,
      senderModel,
      senderRole,
      receiverId: null,
      receiverModel: "Group",
      receiverRole: "admin",
      message,
    });

    await newMessage.save();
    console.log("‚úÖ Message saved:", newMessage);

    const io = req.app.get("io");
    io.to("admins").emit("receiveMessage", newMessage);

    res.status(201).json({ success: true, message: "Message sent", data: newMessage });
  } catch (error) {
    console.error("‚ùå Error sending message:", error);
    res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};


exports.getChatHistory = async (req, res) => {
  try {
    console.log("üì¢ API getChatHistory Called with params:", req.params);

    let { userId, userModel } = req.params;

    if (!userId || !userModel || userId === "undefined") {
      return res.status(400).json({ success: false, message: "Missing or invalid parameters" });
    }

    console.log("üîç Searching chat history for user:", { userId, userModel });

    const senderId = mongoose.Types.ObjectId.isValid(userId) ? new mongoose.Types.ObjectId(userId) : userId;

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    const chatHistory = await Chat.find({
      $or: [
        { senderId, senderModel: userModel },  // ‡∏î‡∏∂‡∏á‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà user ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏™‡πà‡∏á
        { receiverId: senderId, receiverModel: userModel } // ‡∏î‡∏∂‡∏á‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà Admin ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á user ‡∏´‡∏£‡∏∑‡∏≠ owner
      ]
    }).sort({ timestamp: 1 });

    if (!chatHistory.length) {
      return res.status(404).json({ success: false, message: "No chat history found" });
    }

    console.log("üìú Retrieved Chat History:", chatHistory);

    res.status(200).json({ success: true, data: chatHistory });

  } catch (error) {
    console.error("‚ùå Error fetching chat history:", error);
    res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};


// üìå 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß
exports.markAsRead = async (req, res) => {
  try {
    const { messageId } = req.params;

    if (!messageId) {
      return res.status(400).json({ success: false, message: "Missing messageId" });
    }

    const updatedMessage = await Chat.findByIdAndUpdate(messageId, { isRead: true }, { new: true });

    if (!updatedMessage) {
      return res.status(404).json({ success: false, message: "Message not found" });
    }

    res.status(200).json({ success: true, message: "Message marked as read", data: updatedMessage });
  } catch (error) {
    console.error("‚ùå Error marking message as read:", error);
    res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};

// üìå 5. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
exports.deleteMessage = async (req, res) => {
  try {
    const { messageId, userId } = req.params;

    if (!messageId || !userId) {
      return res.status(400).json({ success: false, message: "Missing messageId or userId" });
    }

    const message = await Chat.findById(messageId);
    if (!message) {
      return res.status(404).json({ success: false, message: "Message not found" });
    }

    if (message.senderId.toString() !== userId && message.receiverId.toString() !== userId) {
      return res.status(403).json({ success: false, message: "Unauthorized to delete this message" });
    }

    await Chat.findByIdAndDelete(messageId);
    res.status(200).json({ success: true, message: "Message deleted" });
  } catch (error) {
    console.error("‚ùå Error deleting message:", error);
    res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};

exports.getChatUsers = async (req, res) => {
  try {
    console.log("üì¢ Fetching all chat users...");

    // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á Admin ‡∏´‡∏£‡∏∑‡∏≠ SuperAdmin
    const chatUsers = await Chat.aggregate([
      {
        $match: {
          receiverRole: { $in: ["admin", "superadmin"] }, // ‚úÖ ‡∏î‡∏∂‡∏á‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á Admin ‡∏´‡∏£‡∏∑‡∏≠ SuperAdmin
        },
      },
      {
        $group: {
          _id: "$senderId", // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠ Business Owner)
          userRole: { $first: "$senderRole" }, // ‚úÖ ‡∏î‡∏∂‡∏á Role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
        },
      },
      {
        $lookup: {
          from: "users", // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Collection Users
          localField: "_id",
          foreignField: "_id",
          as: "userData",
        },
      },
      {
        $lookup: {
          from: "businessowners", // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏à‡∏≤‡∏Å Collection BusinessOwners
          localField: "_id",
          foreignField: "_id",
          as: "ownerData",
        },
      },
      {
        $project: {
          _id: 1,
          name: {
            $ifNull: [
              { $arrayElemAt: ["$userData.firstName", 0] },  // ‚úÖ ‡πÉ‡∏ä‡πâ firstName ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
              { $arrayElemAt: ["$ownerData.firstName", 0] }, // ‚úÖ ‡πÉ‡∏ä‡πâ businessName ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
              { $arrayElemAt: ["$userData.email", 0] }, // ‚úÖ ‡πÉ‡∏ä‡πâ email ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
              "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠", // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠"
            ],
          },
          email: { $ifNull: [{ $arrayElemAt: ["$userData.email", 0] }, { $arrayElemAt: ["$ownerData.email", 0] }] },
          role: "$userRole",
        },
      },
    ]);

    console.log("‚úÖ Retrieved Chat Users:", chatUsers);

    if (!chatUsers.length) {
      return res.status(404).json({ success: false, message: "No users found" });
    }

    res.status(200).json({ success: true, data: chatUsers });

  } catch (error) {
    console.error("‚ùå Error fetching chat users:", error);
    res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};
// üìå 6. ‡∏î‡∏∂‡∏á Admin ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå)
exports.getAnyAdmin = async (req, res) => {
  try {
    console.log("üì¢ Fetching any available admin...");

    const admin = await Admin.findOne().sort({ createdAt: 1 });
    if (!admin) {
      console.log("‚ùå No Admin Found!");
      return res.status(404).json({ success: false, message: "No admin available" });
    }

    console.log("‚úÖ Fallback Admin Found:", admin._id);
    return res.json({ success: true, receiverId: admin._id });

  } catch (error) {
    console.error("‚ùå Error fetching any admin:", error);
    res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};

// üìå 1. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Admin ‡πÑ‡∏õ‡∏¢‡∏±‡∏á User ‡∏´‡∏£‡∏∑‡∏≠ BusinessOwner
exports.sendMessageToUserOrOwner = async (req, res) => {
  try {
    let { senderId, senderModel, senderRole, message, receiverId, receiverModel, receiverRole } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!senderId || !message || !receiverId || !receiverModel || !receiverRole) {
      return res.status(400).json({ success: false, message: "Missing required fields" });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    const newMessage = new Chat({
      senderId,
      senderModel,
      senderRole,
      receiverId, // receiverId ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (User ‡∏´‡∏£‡∏∑‡∏≠ BusinessOwner)
      receiverModel, // receiverModel ‡πÄ‡∏õ‡πá‡∏ô "User" ‡∏´‡∏£‡∏∑‡∏≠ "BusinessOwner"
      receiverRole, // receiverRole ‡∏Ñ‡∏∑‡∏≠ role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (customer ‡∏´‡∏£‡∏∑‡∏≠ owner)
      message,
    });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await newMessage.save();
    console.log("‚úÖ Message saved:", newMessage);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡πÉ‡∏ä‡πâ socket)
    const io = req.app.get("io");
    io.to(receiverId.toString()).emit("receiveMessage", newMessage); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°

    res.status(201).json({ success: true, message: "Message sent", data: newMessage });
  } catch (error) {
    console.error("‚ùå Error sending message:", error);
    res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};
