const SubStadium = require("../models/subStadiumModel");
const cloudinary = require("cloudinary").v2;
const streamifier = require("streamifier");
const mongoose = require("mongoose");

// üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
exports.getSubStadiums = async (req, res) => {
    try {
        const { arenaId, sportId } = req.params;
        console.log("üìå ‡∏Ñ‡πà‡∏≤ arenaId:", arenaId, "sportId:", sportId);
  
        if (!arenaId || !sportId) {
            return res.status(400).json({ message: "‚ùå arenaId ‡∏´‡∏£‡∏∑‡∏≠ sportId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }
  
        const subStadiums = await SubStadium.find({ 
            arenaId: String(arenaId), 
            sportId: String(sportId) 
        });
  
        res.status(200).json(subStadiums);
    } catch (error) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢" });
    }
  };
  


// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡∏°‡πà (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ)
exports.createSubStadium = async (req, res) => {
  try {
      const { 
          arenaId, sportId, name, description, intendant, phone, 
          openTime, closeTime, price, status, images: base64Images, owner_id 
      } = req.body;

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ owner_id ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!owner_id) {
          return res.status(400).json({ message: "‚ùå owner_id is required" });
      }

      let images = [];

      // ‚úÖ 1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Base64 (‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà)
      if (base64Images && base64Images.length > 0) {
          for (let base64Image of base64Images) {
              const result = await cloudinary.uploader.upload(base64Image, { folder: "substadium" });
              images.push(result.secure_url);
          }
      }

      // ‚úÖ 2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Multer (‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå)
      if (req.files && req.files.length > 0) {
          for (let file of req.files) {
              const result = await cloudinary.uploader.upload(file.path, { folder: "substadium" });
              images.push(result.secure_url);
          }
      }

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å owner_id ‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const newSubStadium = new SubStadium({ 
          arenaId, sportId, name, description, intendant, phone, 
          openTime, closeTime, price, status, images, owner_id
      });

      const savedSubStadium = await newSubStadium.save();
      res.status(201).json({ message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", subStadium: savedSubStadium });
  } catch (error) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢:", error);
      res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢", error });
  }
};


  

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢ (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡∏°‡πà)
exports.updateSubStadium = async (req, res) => {
    try {
        const { id } = req.params;
        console.log("üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ô‡∏≤‡∏° ID:", id);
        console.log("üì¶ Data ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Frontend:", req.body);

        if (!id) {
            console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ ID ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤");
            return res.status(400).json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ ID" });
        }

        const updatedFields = req.body; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ req.body ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

        // ‚úÖ ‡πÉ‡∏ä‡πâ findByIdAndUpdate ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        const updatedSubStadium = await SubStadium.findByIdAndUpdate(
            id,
            { $set: updatedFields }, // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤
            { new: true } // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        );

        if (!updatedSubStadium) {
            console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢ ID:", id);
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢" });
        }

        console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:", updatedSubStadium);

        res.status(200).json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", subStadium: updatedSubStadium });
    } catch (error) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢:", error);
        res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", error });
    }
};



exports.deleteSubStadium = async (req, res) => {
  try {
      const { id } = req.params;
      const { owner_id } = req.body;

      console.log("üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏° ID:", id, "‡πÇ‡∏î‡∏¢ owner_id:", owner_id); // ‚úÖ Debug

      if (!owner_id) {
          return res.status(400).json({ message: "‚ùå owner_id is required" });
      }

      const subStadium = await SubStadium.findById(id);
      if (!subStadium) {
          return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢" });
      }

      console.log("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°:", subStadium); // ‚úÖ Debug - ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ owner_id ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ `owner_id` ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å `.toString()`
      if (!subStadium.owner_id) {
          return res.status(500).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ owner_id" });
      }

      if (subStadium.owner_id.toString() !== owner_id) {
          return res.status(403).json({ message: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏ô‡∏µ‡πâ" });
      }

      await SubStadium.findByIdAndDelete(id);
      res.status(200).json({ message: "‚úÖ ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢:", error);
      res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢", error });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏ï‡∏≤‡∏° ID
exports.getSubStadiumDetails = async (req, res) => {
    try {
        const { id } = req.params;
        console.log("üìå API ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - SubStadium ID:", id);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ID ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!mongoose.Types.ObjectId.isValid(id)) {
            console.log("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", id);
            return res.status(400).json({ message: "‚ùå ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        // ‚úÖ ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏°‡∏µ ID ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Database ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const subStadium = await SubStadium.findById(id);

        if (!subStadium) {
            console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢ ID:", id);
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢" });
        }

        console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏ö:", subStadium);

        res.status(200).json(subStadium);
    } catch (error) {
        console.error("‚ùå API ERROR:", error);
        res.status(500).json({ message: "‚ùå Internal Server Error", error });
    }
};



