
// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Register ‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤ (‡∏£‡∏±‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
const Arena = require("../models/Arena");
const BusinessOwner = require("../models/BusinessOwner");

exports.registerArena = async (req, res) => {
  try {
    console.log("üì© Register Arena Request Body:", req.body);
    console.log("üì§ Uploaded Files:", req.files);

    const { fieldName, ownerName, phone, startTime, endTime, location, additionalInfo, businessOwnerId } = req.body;
    const amenities = req.body.amenities ? JSON.parse(req.body.amenities) : [];

    if (!fieldName || !ownerName || !phone || !startTime || !endTime || !location || !req.files || req.files.length === 0) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const businessOwner = await BusinessOwner.findById(businessOwnerId);
    if (!businessOwner) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à" });
    }

    // ‡∏î‡∏∂‡∏á URL ‡∏à‡∏≤‡∏Å Cloudinary ‡∏ó‡∏µ‡πà multer ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    const images = req.files.map(file => file.path);

    const newArena = await Arena.create({
      fieldName,
      ownerName,
      phone,
      startTime,
      endTime,
      location: JSON.parse(location), // ‡∏ñ‡πâ‡∏≤ location ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON string ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô
      amenities, // ‚úÖ ‡πÉ‡∏ä‡πâ amenities ‡∏ï‡∏£‡∏á ‡πÜ ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô Array ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      additionalInfo,
      images,
      businessOwnerId
    });

    console.log("‚úÖ Arena Registered Successfully:", newArena);
    res.status(201).json({ message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", arena: newArena });

  } catch (err) {
    console.error("‚ùå Error registering arena:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", error: err.message });
  }
};

  

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (JOIN BusinessOwner)
exports.getArenas = async (req, res) => {
  try {
    const arenas = await Arena.find().populate("businessOwnerId", "firstName lastName email phoneNumber");
    res.status(200).json(arenas);
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ID (JOIN BusinessOwner) fix
exports.getArenaById = async (req, res) => {
  try {
    const arena = await Arena.findById(req.params.id).populate("businessOwnerId", "firstName lastName email phoneNumber");
    if (!arena) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°" });
    }
    res.status(200).json(arena);
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
};

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤
exports.updateArena = async (req, res) => {
  try {    
    const updatedArena = await Arena.findByIdAndUpdate(req.params.id, req.body, { new: true }).populate("businessOwnerId");
    if (!updatedArena) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°" });
    }
    res.status(200).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", arena: updatedArena });
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
};

// ‚úÖ ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤
exports.deleteArena = async (req, res) => {
  try {
    const deletedArena = await Arena.findByIdAndDelete(req.params.id);
    if (!deletedArena) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°" });
    }
    res.status(200).json({ message: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
};
