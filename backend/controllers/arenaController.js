const mongoose = require("mongoose");
const Arena = require("../models/Arena");
const SportsCategory = require("../models/SportsCategory")
const BusinessOwner = require("../models/BusinessOwner");

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Register ‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤ (‡∏£‡∏±‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
exports.registerArena = async (req, res) => {
  try {
    console.log("üì© Register Arena Request Body:", req.body);
    console.log("üì§ Uploaded Files:", req.files);

    const { fieldName, ownerName, phone, startTime, endTime, location, additionalInfo, businessOwnerId } = req.body;
    const amenities = req.body.amenities ? JSON.parse(req.body.amenities) : [];

    if (!fieldName || !ownerName || !phone || !startTime || !endTime || !location || !req.files || req.files.length === 0) {
      return res.status(400).json({ message: "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ businessOwnerId ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (!mongoose.Types.ObjectId.isValid(businessOwnerId)) {
      return res.status(400).json({ message: "‚ö†Ô∏è businessOwnerId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const businessOwner = await BusinessOwner.findById(businessOwnerId);
    if (!businessOwner) {
      return res.status(404).json({ message: "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á `location` ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á JSON String ‡πÄ‡∏õ‡πá‡∏ô Object
    let parsedLocation;
    try {
      parsedLocation = JSON.parse(location);
      if (!parsedLocation.coordinates || !Array.isArray(parsedLocation.coordinates) || parsedLocation.coordinates.length !== 2) {
        return res.status(400).json({ message: "‚ö†Ô∏è ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      }
    } catch (err) {
      return res.status(400).json({ message: "‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ `open` ‡πÅ‡∏•‡∏∞ `status`
    const images = req.files.map(file => file.path);

    const newArena = await Arena.create({
      fieldName,
      ownerName,
      phone,
      startTime,
      endTime,
      location: parsedLocation,
      amenities,
      additionalInfo,
      images,
      businessOwnerId,
      open: true,  // ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      status: "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",  // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    });

    console.log("‚úÖ Arena Registered Successfully:", newArena);
    res.status(201).json({ message: "‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", arena: newArena });

  } catch (err) {
    console.error("‚ùå Error registering arena:", err);
    res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", error: err.message });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤‡∏ï‡∏≤‡∏° `owner_id`
exports.getArenas = async (req, res) => {
  try {
    const { owner_id } = req.query;
    console.log("üì¢ Owner ID ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤:", owner_id); // ‚úÖ Debugging

    const arenas = await Arena.find({ owner_id });
    console.log("‚úÖ ‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å DB:", arenas); // ‚úÖ Debugging

    res.json(arenas);
  } catch (error) {
    console.error("‚ùå Error loading arenas:", error);
    res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ô‡∏≤‡∏°" });
  }
};


// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `arena_id`
exports.getArenaById = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "‚ö†Ô∏è arena_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const arena = await Arena.findById(id).populate("businessOwnerId", "firstName lastName email phoneNumber");

    if (!arena) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°" });
    }

    res.status(200).json(arena);
  } catch (error) {
    console.error("‚ùå Error fetching arena by ID:", error);
    res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", error: error.message });
  }
};

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤
exports.updateArena = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "‚ö†Ô∏è arena_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const updatedArena = await Arena.findByIdAndUpdate(id, req.body, { new: true }).populate("businessOwnerId");

    if (!updatedArena) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°" });
    }

    res.status(200).json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", arena: updatedArena });
  } catch (error) {
    console.error("‚ùå Error updating arena:", error);
    res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", error: error.message });
  }
};

// ‚úÖ ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤
exports.deleteArena = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "‚ö†Ô∏è arena_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const deletedArena = await Arena.findByIdAndDelete(id);

    if (!deletedArena) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°" });
    }

    res.status(200).json({ message: "‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  } catch (error) {
    console.error("‚ùå Error deleting arena:", error);
    res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", error: error.message });
  }
};

exports.toggleStadiumStatus = async (req, res) => {
  try {
    const { arenaId, open } = req.body;
    console.log("üì¢ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤:", { arenaId, open }); // ‚úÖ Debugging

    if (!mongoose.Types.ObjectId.isValid(arenaId)) {
      return res.status(400).json({ message: "‚ö†Ô∏è arenaId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const existingArena = await Arena.findById(arenaId);
    if (!existingArena) {
      return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" });
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const updatedArena = await Arena.findByIdAndUpdate(
      arenaId,
      { open: open },
      { new: true }
    );

    if (!updatedArena) {
      return res.status(404).json({ message: "‚ùå ‡∏™‡∏ô‡∏≤‡∏°‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" });
    }

    console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", updatedArena); // ‚úÖ Debugging
    res.status(200).json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", arena: updatedArena });

  } catch (error) {
    console.error("‚ùå Error updating stadium status:", error);
    res.status(500).json({ message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ô‡∏≤‡∏°", error: error.message });
  }
};

exports.searchArenas = async (req, res) => {
  try {
    const { query, sport, status } = req.query;
    console.log("status ", status)
    let searchCriteria = {};

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤)
    if (query) {
      searchCriteria.fieldName = { $regex: query, $options: "i" };
    }

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤)
    if (sport) {
      const sportCategories = await SportsCategory.find({ sportName: { $in: sport.split(",") } });
      const arenaIds = sportCategories.map(sport => sport.arenaId.toString());
      searchCriteria._id = { $in: arenaIds };
    }

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î"
    if (status === "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ") {
      searchCriteria.open = "true";
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤ ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    let arenas = await Arena.find(searchCriteria).lean();
    const uniqueArenas = Object.values(
      arenas.reduce((acc, arena) => {
        acc[arena._id.toString()] = arena;
        return acc;
      }, {})
    );

    res.json(uniqueArenas);
  } catch (error) {
    console.error("‚ùå Error searching arenas:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};


