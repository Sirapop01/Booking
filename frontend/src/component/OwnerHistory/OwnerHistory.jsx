import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import { jwtDecode } from "jwt-decode";
import Navbar from "../Navbar/Navbar";
import { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, PieChart, Pie, Cell } from "recharts";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import "./OwnerHistory.css";

const OwnerHistory = () => {
    const [stadiums, setStadiums] = useState([]);
    const [bookings, setBookings] = useState([]);
    const [filteredBookings, setFilteredBookings] = useState([]);
    const [selectedMonth, setSelectedMonth] = useState("");
    const [selectedStadium, setSelectedStadium] = useState("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"); // ‚úÖ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏° Default ‡πÄ‡∏õ‡πá‡∏ô "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    const [ownerId, setOwnerId] = useState(null);
    const reportRef = useRef(null); // ‚úÖ ‡πÉ‡∏ä‡πâ Ref ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PDF

    // ‚úÖ ‡∏î‡∏∂‡∏á ownerId ‡∏à‡∏≤‡∏Å Token
    useEffect(() => {
        const storedToken = localStorage.getItem("token") || sessionStorage.getItem("token");
        if (storedToken) {
            try {
                const decoded = jwtDecode(storedToken);
                setOwnerId(decoded.id);
            } catch (error) {
                console.error("‚ùå Error decoding token:", error);
            }
        }
    }, []);

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
    useEffect(() => {
        if (!ownerId) return;
    
        axios
            .get(`http://localhost:4000/api/owner-history/owner-stadiums?ownerId=${ownerId}`) // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° ownerId ‡πÉ‡∏ô query string
            .then((response) => {
                console.log("üìå ‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö:", response.data);
                setStadiums(response.data);
            })
            .catch((error) => {
                console.error("‚ùå Error fetching stadiums:", error.response?.data || error);
            });
    }, [ownerId]);

    // ‚úÖ ‡∏î‡∏∂‡∏á `bookinghistory` ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    useEffect(() => {
        if (!ownerId) return;

        axios.get(`http://localhost:4000/api/owner-history/history?ownerId=${ownerId}`)
            .then((response) => {
                console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Booking ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:", response.data);
                setBookings(response.data);
                setFilteredBookings(response.data);
            })
            .catch((error) => {
                console.error("‚ùå Error fetching booking history:", error.response?.data || error);
            });
    }, [stadiums.length > 0 || ownerId]);

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    useEffect(() => {
        let filtered = bookings;

        if (selectedMonth) {
            filtered = filtered.filter((booking) =>
                booking.details.some((detail) => detail.bookingDate.startsWith(selectedMonth))
            );
        }

        if (selectedStadium !== "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") {
            filtered = filtered.filter((booking) => booking.fieldName === selectedStadium);
        }

        setFilteredBookings(filtered);
    }, [selectedMonth, selectedStadium, bookings]);

    // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Bar Chart
    const monthlyData = filteredBookings.reduce((acc, booking) => {
        const month = booking.details[0].bookingDate.substring(0, 7);
        acc[month] = (acc[month] || 0) + 1;
        return acc;
    }, {});

    const barChartData = Object.keys(monthlyData).map((month) => ({
        month,
        count: monthlyData[month],
    }));

    // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pie Chart
    const stadiumData = filteredBookings.reduce((acc, booking) => {
        const stadium = booking.fieldName;
        acc[stadium] = (acc[stadium] || 0) + 1;
        return acc;
    }, {});

    const pieChartData = Object.keys(stadiumData).map((stadium) => ({
        name: stadium,
        value: stadiumData[stadium],
    }));

    const COLORS = ["#8884d8", "#82ca9d", "#ffc658", "#ff8042", "#d45087"];

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PDF
    const downloadPDF = () => {
        if (!reportRef.current) {
            console.error("‚ùå reportRef.current is null. PDF generation failed.");
            return;
        }

        setTimeout(() => {
            html2canvas(reportRef.current).then((canvas) => {
                const imgData = canvas.toDataURL("image/png");
                const pdf = new jsPDF("p", "mm", "a4");
                const imgWidth = 210;
                const imgHeight = (canvas.height * imgWidth) / canvas.width;
                pdf.addImage(imgData, "PNG", 0, 0, imgWidth, imgHeight);
                pdf.save("owner-history-report.pdf");
            }).catch((error) => {
                console.error("‚ùå Error generating PDF:", error);
            });
        }, 500);
    };

    return (
        <>
            <Navbar />
            <div className="owner-history-container">
                <div ref={reportRef}> {/* ‚úÖ ‡∏Ñ‡∏£‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PDF */}
                    <h1 className="title">‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°</h1>

                    {/* ‚úÖ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≠‡∏á */}
                    <div className="filter-container">
                        <label htmlFor="month">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</label>
                        <input type="month" id="month" value={selectedMonth} onChange={(e) => setSelectedMonth(e.target.value)} />

                        <label htmlFor="stadium">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏°:</label>
                            <select id="stadium" value={selectedStadium} onChange={(e) => setSelectedStadium(e.target.value)}>
                                <option value="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                                {stadiums.length > 0 ? (
                                    stadiums.map((stadium) => (
                                        <option key={stadium._id} value={stadium.fieldName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}>
                                            {stadium.fieldName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
                                        </option>
                                    ))
                                ) : (
                                    <option disabled>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°</option>
                                )}
                            </select>
                        </div>

                    {/* ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á */}
                    <table className="booking-table">
                        <thead>
                            <tr>
                                <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á</th>
                                <th>‡∏™‡∏ô‡∏≤‡∏°</th>
                                <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á</th>
                                <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
                                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                            </tr>
                        </thead>
                        <tbody>
                            {filteredBookings.length > 0 ? (
                                filteredBookings.map((booking, index) => (
                                    <tr key={index}>
                                        <td>{new Date(booking.details[0].bookingDate).toLocaleDateString()}</td>
                                        <td>{booking.fieldName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</td>
                                        <td>{booking.userId?.firstName} {booking.userId?.lastName}</td>
                                        <td>
                                            {`${booking.details[0].startTime} - ${booking.details[0].endTime}`}
                                        </td>
                                        <td className={`status ${booking.status}`}>{booking.status}</td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan="5" className="no-data">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</td>
                                </tr>
                            )}
                        </tbody>
                    </table>

                    {/* ‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ */}
                    <div className="charts-container">
                        <div className="chart-box">
                            <h2>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h2>
                            <BarChart width={500} height={300} data={barChartData}>
                                <XAxis dataKey="month" />
                                <YAxis />
                                <Tooltip />
                                <Legend />
                                <Bar dataKey="count" fill="#007bff" />
                            </BarChart>
                        </div>

                        <div className="chart-box">
                            <h2>‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ô‡∏≤‡∏°</h2>
                            <PieChart width={400} height={300}>
                                <Pie data={pieChartData} cx="50%" cy="50%" outerRadius={100} fill="#8884d8" dataKey="value">
                                    {pieChartData.map((entry, index) => (
                                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                                    ))}
                                </Pie>
                                <Tooltip />
                            </PieChart>
                        </div>
                    </div>
                </div>

                {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF */}
                <div className="button-container">
                    <button onClick={downloadPDF} className="download-button">‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF</button>
                </div>
            </div>
        </>
    );
};

export default OwnerHistory;
