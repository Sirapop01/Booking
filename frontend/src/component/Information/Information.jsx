import React, { useState } from 'react';
import './Information.css';
import NavbarRegis from "../NavbarRegis/NavbarRegis"; // ‡∏ô‡∏≥ NavbarRegis ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å

const Information = () => {
    const [images, setImages] = useState({
        registration: null,
        idCard: null,
        idHolder: null,
        qrCode: null
    });

    const [formData, setFormData] = useState({
        accountName: '',
        bank: '',
        accountNumber: ''
    });

    const [errors, setErrors] = useState({}); // ‚úÖ State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error

    const handleImageChange = (event, type) => {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                setImages(prev => ({ ...prev, [type]: reader.result }));
                setErrors(prev => ({ ...prev, [type]: '' })); // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á error ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
            };
            reader.readAsDataURL(file);
        }
    };

    const handleInputChange = (event) => {
        const { name, value } = event.target;
        setFormData(prev => ({ ...prev, [name]: value }));
        setErrors(prev => ({ ...prev, [name]: '' })); // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á error ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    };

    const validateForm = () => {
        let newErrors = {};

        if (!images.registration) newErrors.registration = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ';
        if (!images.idCard) newErrors.idCard = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ';
        if (!images.idHolder) newErrors.idHolder = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ';
        if (!formData.accountName || !formData.bank || !formData.accountNumber) newErrors.dataTransfer = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö';
        if (!images.qrCode) newErrors.qrCode = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ';

        setErrors(newErrors);

        return Object.keys(newErrors).length === 0; // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ error return true
    };

    const handleSubmit = () => {
        if (validateForm()) {
            alert("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        }
    };

    return (
        <div className="information-container">
            <div className="information-section">
                {/* üîπ ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô */}
                <div className="information-box">
                    <p className="information-label">
                        ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô *
                        {errors.registration && <span className="error-message-information"> {errors.registration}</span>}
                    </p>
                    <div className="information-upload large-upload">
                        <input type="file" accept="image/*" onChange={(e) => handleImageChange(e, 'registration')} className="file-input" id="registration-upload" />
                        <label htmlFor="registration-upload" className="upload-label">
                            {images.registration ? (
                                <img src={images.registration} alt="Registration" className="uploaded-image" />
                            ) : (
                                <span className="information-add">+</span>
                            )}
                        </label>
                    </div>
                </div>

                {/* üîπ ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô */}
                <div className="information-box">
                    <p className="information-label">
                        ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô *
                        {errors.idCard && <span className="error-message-information"> {errors.idCard}</span>}
                    </p>
                    <div className="information-upload">
                        <input type="file" accept="image/*" onChange={(e) => handleImageChange(e, 'idCard')} className="file-input" id="idCard-upload" />
                        <label htmlFor="idCard-upload" className="upload-label">
                            {images.idCard ? (
                                <img src={images.idCard} alt="ID Card" className="uploaded-image" />
                            ) : (
                                <span className="information-add">+</span>
                            )}
                        </label>
                    </div>

                    <p className="information-label">
                        ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô *
                        {errors.idHolder && <span className="error-message-information"> {errors.idHolder}</span>}
                    </p>
                    <div className="information-upload">
                        <input type="file" accept="image/*" onChange={(e) => handleImageChange(e, 'idHolder')} className="file-input" id="idHolder-upload" />
                        <label htmlFor="idHolder-upload" className="upload-label">
                            {images.idHolder ? (
                                <img src={images.idHolder} alt="ID Holder" className="uploaded-image" />
                            ) : (
                                <span className="information-add">+</span>
                            )}
                        </label>
                    </div>
                </div>

                {/* üîπ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô */}
                <div className="information-box">
                    <p className="information-label">
                        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô *
                        {errors.dataTransfer && <span className="error-message-information"> {errors.dataTransfer}</span>}
                    </p>

                    <p className="information-label">
                        ‡∏£‡∏π‡∏õ Qr Code : *
                        {errors.qrCode && <span className="error-message-information"> {errors.qrCode}</span>}
                    </p>
                    <div className="information-upload">
                        <input type="file" accept="image/*" onChange={(e) => handleImageChange(e, 'qrCode')} className="file-input" id="qrCode-upload" />
                        <label htmlFor="qrCode-upload" className="upload-label">
                            {images.qrCode ? (
                                <img src={images.qrCode} alt="QR Code" className="uploaded-image" />
                            ) : (
                                <span className="information-add">+</span>
                            )}
                        </label>
                    </div>

                    <input type="text" name="accountName" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" className="information-input" onChange={handleInputChange} />
                    <input type="text" name="bank" placeholder="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£" className="information-input" onChange={handleInputChange} />
                    <input type="text" name="accountNumber" placeholder="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" className="information-input" onChange={handleInputChange} />
                </div>
            </div>

            <div className="information-buttons">
                <button className="information-cancel">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                <button className="information-next" onClick={handleSubmit}>‡∏ï‡πà‡∏≠‡πÑ‡∏õ</button>
            </div>
        </div>
    );
};

const InformationPage = () => {
    return (
        <>
            <NavbarRegis />
            <Information />
        </>
    );
};

export default InformationPage;
