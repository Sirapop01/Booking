import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Swal from "sweetalert2";
import "./ConfirmBooking.css";
import Navbar from "../Navbar/Navbar";
import { useParams } from "react-router-dom";

const ConfirmBooking = () => {
  const navigate = useNavigate();
  const [users, setUsers] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [bookings, setBookings] = useState([]);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const token = localStorage.getItem("token") || sessionStorage.getItem("token");
  const { stadiumId } = useParams();

  if (!token) {
    console.warn("üö® Token missing! Redirecting to login...");
    navigate("/login");
  }

  useEffect(() => {
    axios.get(`http://localhost:4000/api/payments/paid-users?stadiumId=${stadiumId}`, {
      headers: { Authorization: `Bearer ${token}` }
    })
      .then(({ data }) => {
        console.log("‚úÖ Paid Users Fetched", data);
        setUsers(data);
      })
      .catch((error) => console.error("‚ùå Error fetching paid users:", error));
  }, [token]);

  useEffect(() => {
    if (!selectedUser || !token) return;

    axios
      .get(`http://localhost:4000/api/payments/user-bookings?userId=${selectedUser.userId._id}&sessionId=${selectedUser.sessionId}`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then(({ data }) => {
        console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Session:", selectedUser.sessionId, data);
        setBookings(data);
      })
      .catch((error) => console.error("‚ùå Error fetching user bookings:", error));
  }, [selectedUser, token]);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
  const confirmBooking = async () => {
    if (!selectedBooking || !selectedBooking._id) {
      console.error("‚ùå Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á", selectedBooking);
      Swal.fire("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "error");
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `_id` ‡πÄ‡∏õ‡πá‡∏ô string
    const bookingId = String(selectedBooking._id);
    const apiUrl = `http://localhost:4000/api/payments/confirm/${bookingId}`;

    console.log("üõ†Ô∏è Debug: Booking ID:", bookingId);
    console.log("üõ†Ô∏è Debug: API URL:", apiUrl);

    Swal.fire({
      title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á?",
      text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      icon: "question",
      showCancelButton: true,
      confirmButtonText: "‚úîÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
      cancelButtonText: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await axios.put(
            apiUrl,
            {}, // ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà body ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ id ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô URL ‡πÅ‡∏•‡πâ‡∏ß
            { headers: { Authorization: `Bearer ${token}` } }
          );

          console.log("‚úÖ Booking Confirmed:", response.data);
          Swal.fire("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß", "success");

          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô UI
          setBookings((prevBookings) =>
            prevBookings.map((booking) =>
              booking._id === selectedBooking._id
                ? { ...booking, status: "confirmed" }
                : booking
            )
          );

          setSelectedBooking(null); // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        } catch (error) {
          console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:", error);
          Swal.fire("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ", "error");
        }
      }
    });
  };


  const rejectBooking = async () => {
    if (!selectedBooking || !selectedBooking._id) {
      console.error("‚ùå Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á", selectedBooking);
      Swal.fire("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "error");
      return;
    }

    const bookingId = String(selectedBooking._id);
    const apiUrl = `http://localhost:4000/api/payments/reject/${bookingId}`;

    console.log("üõ†Ô∏è Debug: Booking ID ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò:", bookingId);
    console.log("üõ†Ô∏è Debug: API URL:", apiUrl);

    // ‚úÖ Popup ‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
    const { value: rejectionReason } = await Swal.fire({
      title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò",
      input: "textarea",
      inputPlaceholder: "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...",
      showCancelButton: true,
      confirmButtonText: "‚úîÔ∏è ‡∏™‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•",
      cancelButtonText: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });

    if (!rejectionReason) {
      Swal.fire("‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò", "error");
      return;
    }

    Swal.fire({
      title: "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á?",
      text: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      reverseButtons: true,
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await axios.put(
            apiUrl,
            { rejectionReason }, // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
            { headers: { Authorization: `Bearer ${token}` } }
          );

          console.log("‚úÖ Booking Rejected:", response.data);
          Swal.fire("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß", "success");

          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô UI
          setBookings((prevBookings) =>
            prevBookings.map((booking) =>
              booking._id === selectedBooking._id
                ? { ...booking, status: "rejected", rejectionReason }
                : booking
            )
          );

          setSelectedBooking(null); // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
        } catch (error) {
          console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:", error);
          Swal.fire("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ", "error");
        }
      }
    });
  };


  return (
    <div className="admin-payment-container">
      <Navbar />
      <div className="payment-content">
        <div className="user-list-container3">
          <div className="user-list3">
            <div className="list-header3">‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</div>
            {users.length === 0 ? (
              <p style={{ textAlign: "center" }}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</p>
            ) : (
              users.map((user) => (
                <div
                  key={user._id}
                  className={`user-item3 ${selectedUser?._id === user._id ? "selected" : ""}`}
                  onClick={() => setSelectedUser(user)}
                >
                  {user.userId?.firstName ?? "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠"} {user.userId?.lastName ?? ""}
                </div>
              ))
            )}
          </div>
        </div>

        {selectedUser && (
          <div className="payment-table-container3">
            <div className="payment-table3">
              <div className="table-header3">
                ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á {selectedUser.userId.firstName} {selectedUser.userId.lastName} (Session: {selectedUser.sessionId})
              </div>
              <table>
                <thead>
                  <tr>
                    <th>‡∏ß‡∏±‡∏ô</th>
                    <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
                    <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤</th>
                    <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</th>
                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                    <th>‡∏™‡∏•‡∏¥‡∏õ</th>
                  </tr>
                </thead>
                <tbody>
                  {bookings.length === 0 ? (
                    <tr>
                      <td colSpan="6" style={{ textAlign: "center", color: "red" }}>
                        ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Session ‡∏ô‡∏µ‡πâ
                      </td>
                    </tr>
                  ) : (
                    bookings.map((booking, index) => {
                      if (!Array.isArray(booking.details) || booking.details.length === 0) {
                        return (
                          <tr key={`no-details-${index}`}>
                            <td colSpan="6" style={{ textAlign: "center", color: "red" }}>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</td>
                          </tr>
                        );
                      }

                      return booking.details.map((details, idx) => (
                        <tr key={`${booking._id}-${idx}`} onClick={() => setSelectedBooking(booking)}>
                          <td>{details.bookingDate ? new Date(details.bookingDate).toLocaleDateString() : "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</td>
                          <td>{details.startTime || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤"} - {details.endTime || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤"}</td>
                          <td>{details.sportName || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤"}</td>
                          <td>{booking.amount} ‡∏ø</td>
                          <td>{booking.status}</td>
                          <td>
                            <button onClick={() => Swal.fire({
                              title: "‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô",
                              imageUrl: booking.slipImage,
                              imageAlt: "Slip Image",
                              showCloseButton: true,
                              confirmButtonText: "‡∏õ‡∏¥‡∏î",
                            })}>üñºÔ∏è ‡∏î‡∏π‡∏™‡∏•‡∏¥‡∏õ</button>
                          </td>
                        </tr>
                      ));
                    })
                  )}
                </tbody>
              </table>

              {selectedBooking && (
                <div className="action-buttons3">
                  <button className="confirm-button3" onClick={confirmBooking}>‚úîÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</button>
                  <button className="reject-button3" onClick={rejectBooking}>‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</button>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ConfirmBooking;
