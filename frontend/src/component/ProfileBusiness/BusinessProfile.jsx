import React, { useState, useEffect } from "react";
//import "./UserProfile.css";
import defaultProfilePic from "../assets/threeman.png";
import { FaPencilAlt } from "react-icons/fa";
import { jwtDecode } from "jwt-decode";
import axios from "axios";
import { useNavigate } from "react-router-dom";

const BusinessProfile = () => {
  const [isEditable, setIsEditable] = useState(false);
  const [id, setId] = useState("");
  const [member, setMember] = useState({});
  const [showLogoutModal, setShowLogoutModal] = useState(false); // ‚úÖ New state for popup modal
  const navigate = useNavigate();
  const [decodedToken, setDecodedToken] = useState(null);
  const [token, setToken] = useState("");
  const [profileImage, setProfileImage] = useState(null);
  const [newProfileImage, setNewProfileImage] = useState(null);

  useEffect(() => {
    const storedToken = localStorage.getItem("token") || sessionStorage.getItem("token");

    if (storedToken) {
      try {
        const decoded = jwtDecode(storedToken);
        setDecodedToken(decoded);
        setToken(storedToken);
        setId(decoded.id);
        console.log("decoded", decodedToken)
        console.log("‚úÖ Token Decoded ID:", decoded.id);
      } catch (error) {
        console.error("‚ùå Error decoding token:", error);
        setDecodedToken(null);
      }
    } else {
      console.log("‚ö† No token found in localStorage.");
    }
  }, []);

  const toggleEdit = () => {
    setIsEditable((prev) => !prev);
  };



  const handleChange = (e) => {
    setMember((prevMember) => {
      const updatedMember = { ...prevMember, [e.target.name]: e.target.value };
      console.log("‚úèÔ∏è Member Updated Locally:", updatedMember);
      return updatedMember;
    });
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setNewProfileImage(file); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DB
    setProfileImage(URL.createObjectURL(file)); // ‡πÅ‡∏™‡∏î‡∏á preview
    uploadImage(file);
  };

  useEffect(() => {
    if (id) {
      getMB();
    }
  }, [id]);

  const getMB = async () => {
    try {
      const res = await axios.get(`http://localhost:4000/api/business/getinfo/${id}`);
      console.log("üì• Updated Member Data from DB:", res.data);

      // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
      setMember((prevMember) => {
        if (JSON.stringify(prevMember) !== JSON.stringify(res.data)) {
          console.log("üîÑ Updating UI with New Data:", res.data);
          return res.data;
        }
        return prevMember;
      });

      setProfileImage(res.data.profileImage);
    } catch (error) {
      console.error("‚ùå Error fetching member data:", error);
    }
  };


  const updateMemberData = async () => {
    try {
      let updatedData = { ...member };
      let imageUrl = profileImage;

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
      if (newProfileImage) {
        const formData = new FormData();
        formData.append("profileImage", newProfileImage);

        const uploadResponse = await axios.put(
          `http://localhost:4000/api/upload/images/${id}`,
          formData,
          { headers: { "Content-Type": "multipart/form-data" } }
        );

        console.log("‚úÖ Profile Image Updated:", uploadResponse.data);
        imageUrl = uploadResponse.data.profileImage;
        updatedData.profileImage = imageUrl;

      }

      console.log("üì§ Sending Updated Data:", updatedData);

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const response = await axios.put(`http://localhost:4000/api/business/update/${id}`, updatedData);

      console.log("‚úÖ Updated Member Data:", response.data);
      alert("üéâ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

      // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å API ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      await getMB();

      // ‚úÖ ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      setIsEditable(false);
      setNewProfileImage(null);
    } catch (error) {
      console.error("‚ùå Error updating member data:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };

  const uploadImage = async (file) => {
    try {
      const formData = new FormData();
      formData.append("profileImage", file);
      formData.append("id", id);

      const response = await axios.put(
        `http://localhost:4000/api/upload/images/${id}`,
        formData,
        { headers: { "Content-Type": "multipart/form-data" } }
      );

      console.log("‚úÖ Profile Image Updated:", response.data);
      alert("üéâ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      getMB(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      setIsEditable(false);
    } catch (error) {
      console.error("‚ùå Error uploading image:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û");
    }
  };

  const toggleLogout = () => {
    setShowLogoutModal(true); // ‚úÖ Open the modal
  };

  const confirmLogout = async () => {
    try {
      const response = await axios.get("http://localhost:4000/api/auth/logout");

      console.log("‚úÖ API Response:", response.data);

      if (response.data.message === "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô") {
        sessionStorage.clear();
        localStorage.clear();
        setMember({});
        navigate("/");
      } else {
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + response.data.message);
      }
    } catch (error) {
      console.error("‚ùå Logout Error:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö");
    } finally {
      setShowLogoutModal(false); // ‚úÖ Close the modal after action
    }
  };

  return (
    <div className="profile-container" style={{
      overflowY: "hidden",
      display: "flex",
      minHeight: "100vh",
    }}>
      {/* ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ */}
      <aside
        className="sidebar"
        style={{
          backgroundColor: "#0d1b2a", // ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
          height: "100vh", // ‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
          display: "flex",
          flexDirection: "column",
          justifyContent: "space-between",
          paddingTop: "8%"
        }}
      >


        <nav>
          <button onClick={() => navigate("/stadium-list")}>‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</button>
          <button onClick={() => navigate(`/Ownerledger/${id}`)}>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</button>
          <button onClick={() => navigate(`/Addpromotion`)}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</button>
          <button>‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</button>
          <button>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô</button>
          <button className="logout-button" onClick={toggleLogout}>‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å</button>
        </nav>

      </aside>

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */}
      <main className="profile-content">
        <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°</h2>

        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß */}
        <section className="user-info">
          <h3>
            üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
            <FaPencilAlt className="edit-icon" onClick={toggleEdit} />
          </h3>
          <div className="form-grid">
            <div className="input-group">
              <label>‡∏ä‡∏∑‡πà‡∏≠</label>
              <input type="text" name="firstName" value={member?.firstName || ""} onChange={handleChange} readOnly={!isEditable} />
            </div>
            <div className="input-group">
              <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
              <input type="text" name="lastName" value={member?.lastName || ""} onChange={handleChange} readOnly={!isEditable} />
            </div>
            <div className="input-group">
              <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
              <input type="email" name="email" value={member?.email || ""} readOnly />
            </div>
            <div className="input-group">
              <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
              <input type="text" name="phoneNumber" value={member?.phoneNumber || ""} onChange={handleChange} readOnly={!isEditable} />
            </div>


          </div>
        </section>

        {/* ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à */}
        <section className="location-info">

          <div className="form-grid">
            <div className="input-group">
              <label>‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î</label>
              <input
                type="date"
                name="birthdate"
                value={member?.dob ? member.dob.substring(0, 10) : ""}
                onChange={handleChange}
                readOnly={!isEditable}
              />
            </div>
            <div className="input-group">
              <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</label>
              <input type="idCard" name="idCard" value={member?.idCard || ""} readOnly />
            </div>
          </div>
        </section>

        {isEditable && <button className="save-button" onClick={updateMemberData}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>}
        .
      </main>

      {/* üîπ Logout Popup Modal */}
      {showLogoutModal && (
        <div className="logout-popup-overlay" onClick={() => setShowLogoutModal(false)}>
          <div className="logout-popup" onClick={(e) => e.stopPropagation()}>
            <p>‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</p>
            <div className="logout-buttons">
              <button className="confirm-btn" onClick={confirmLogout}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</button>
              <button className="cancel-btn" onClick={() => setShowLogoutModal(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
            </div>
          </div>
        </div>
      )}
    </div>


  );
};

export default BusinessProfile;
