import React, { useState, useEffect } from "react";
import "./verifyowners.css"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ CSS

const API_URL = "http://localhost:4000/api/business-info-requests"; // ‚úÖ API URL

const VerifyOwnersPage = () => {
  const [ownersData, setOwnersData] = useState([]); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB
  const [selectedOwner, setSelectedOwner] = useState(null);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
  useEffect(() => {
    const fetchOwners = async () => {
      try {
        const response = await fetch(API_URL);
        if (!response.ok) throw new Error("Failed to fetch data");
        const data = await response.json();
        setOwnersData(data);
      } catch (error) {
        console.error("üö® Error fetching business owners:", error);
      }
    };

    fetchOwners();
  }, []);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)
  const handleApprove = async (id) => {
    try {
      const response = await fetch(`${API_URL}/approve/${id}`, { method: "PUT" });
      if (!response.ok) throw new Error("Failed to approve request");
      
      setOwnersData(prevData => prevData.filter(owner => owner._id !== id));
      setSelectedOwner(null);
      alert("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
      console.error("üö® Error approving request:", error);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (‡∏•‡∏ö)
  const handleReject = async (id) => {
    if (!window.confirm("‚ùó ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ?")) return;

    try {
      const response = await fetch(`${API_URL}/reject/${id}`, { method: "DELETE" });
      if (!response.ok) throw new Error("Failed to reject request");

      setOwnersData(prevData => prevData.filter(owner => owner._id !== id));
      setSelectedOwner(null);
      alert("üö´ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
      console.error("üö® Error rejecting request:", error);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á");
    }
  };

  return (
    <div className="verify-container">
      {/* Sidebar */}
      <div className="verify-sidebar">
        <h2 className="verify-sidebar-title">‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°</h2>
        {ownersData.length > 0 ? (
          <ul className="verify-list">
            {ownersData.map((owner) => (
              <li
                key={owner._id}
                onClick={() => setSelectedOwner(owner)}
                className={`verify-list-item ${selectedOwner?._id === owner._id ? "active" : ""}`}
              >
                {owner.accountName}
              </li>
            ))}
          </ul>
        ) : (
          <p className="verify-empty">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</p>
        )}
      </div>

      {/* Main Content */}
      <div className="verify-content">
        <h2 className="verify-content-title">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h2>
        {selectedOwner ? (
          <div className="verify-details">
            <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</strong> {selectedOwner.accountName}</p>
            <p><strong>‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:</strong> {selectedOwner.bank}</p>
            <p><strong>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</strong> {selectedOwner.accountNumber}</p>
            <p><strong>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°:</strong> {selectedOwner.businessOwnerId?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</p>

            {/* ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
            <div>
              <p><strong>‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô:</strong></p>
              <div className="verify-doc-box">
                <a href={selectedOwner.images?.registration} target="_blank" rel="noopener noreferrer">
                  ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
                </a>
              </div>
            </div>

            <div>
              <p><strong>‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:</strong></p>
              <div className="verify-img-box">
                <img src={selectedOwner.images?.idCard} alt="ID Card" />
              </div>
            </div>

            <div>
              <p><strong>‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:</strong></p>
              <div className="verify-img-box">
                <img src={selectedOwner.images?.idHolder} alt="Selfie with ID" />
              </div>
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏° */}
            <div className="verify-button-group">
              <button className="verify-button delete" onClick={() => handleReject(selectedOwner._id)}>‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</button>
              <button className="verify-button confirm" onClick={() => handleApprove(selectedOwner._id)}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</button>
            </div>
          </div>
        ) : (
          <p className="verify-empty">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢</p>
        )}
      </div>
    </div>
  );
};

export default VerifyOwnersPage;
