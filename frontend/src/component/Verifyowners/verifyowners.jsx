import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { jwtDecode } from "jwt-decode";
import "./verifyowners.css";

const API_URL = "http://localhost:4000/api/business-info-requests";

const VerifyOwnersPage = () => {
    const navigate = useNavigate();
    const [ownersData, setOwnersData] = useState([]);
    const [selectedOwner, setSelectedOwner] = useState(null);
    const [showRejectPopup, setShowRejectPopup] = useState(false);
    const [rejectReason, setRejectReason] = useState("");
    const [isLoading, setIsLoading] = useState(true);
    const [isAdmin, setIsAdmin] = useState(false);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    useEffect(() => {
        const checkAdmin = () => {
            try {
                const token = localStorage.getItem("token") || sessionStorage.getItem("token");
                if (!token) throw new Error("‚ùå No Token Found");

                const decoded = jwtDecode(token);
                console.log("üîë Decoded Token:", decoded);

                if (decoded.role === "admin" || decoded.role === "superadmin") {
                    setIsAdmin(true);
                } else {
                    throw new Error("‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Admin");
                }
            } catch (error) {
                console.error("üö® Access Denied:", error.message);
                alert("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ!");
                navigate("/");
            }
        };

        checkAdmin();
    }, [navigate]);

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    useEffect(() => {
        if (!isAdmin) return;

        const fetchOwners = async () => {
            setIsLoading(true);
            try {
                const token = localStorage.getItem("token") || sessionStorage.getItem("token");

                const response = await fetch(`${API_URL}/pending`, {
                    headers: { Authorization: `Bearer ${token}` }
                });

                if (!response.ok) throw new Error("Failed to fetch data");
                const data = await response.json();
                console.log("üì° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API:", data); // ‚úÖ Debug Data

                setOwnersData(data);
            } catch (error) {
                console.error("üö® Error fetching business owners:", error);
            } finally {
                setIsLoading(false);
            }
        };

        fetchOwners();
    }, [isAdmin]);

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)
    const handleApprove = async (id) => {
        try {
            const token = localStorage.getItem("token") || sessionStorage.getItem("token");

            const response = await fetch(`${API_URL}/approve/${id}`, {
                method: "PUT",
                headers: { Authorization: `Bearer ${token}` }
            });

            if (!response.ok) throw new Error("Failed to approve request");

            setOwnersData(prevData => prevData.filter(owner => owner._id !== id));
            setSelectedOwner(null);
            alert("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        } catch (error) {
            console.error("üö® Error approving request:", error);
            alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");
        }
    };

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
    const handleReject = async () => {
        if (!rejectReason.trim()) {
            alert("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò");
            return;
        }

        try {
            const token = localStorage.getItem("token") || sessionStorage.getItem("token");

            const response = await fetch(`${API_URL}/reject/${selectedOwner._id}`, {
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                },
                body: JSON.stringify({ reason: rejectReason })
            });

            if (!response.ok) throw new Error("Failed to reject request");

            setOwnersData(prevData => prevData.filter(owner => owner._id !== selectedOwner._id));
            setSelectedOwner(null);
            setShowRejectPopup(false);
            alert("üö´ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        } catch (error) {
            console.error("üö® Error rejecting request:", error);
            alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á");
        }
    };

    if (!isAdmin) return null;

    return (
        <div className="verify-container">
            <div className="verify-sidebar">
                <h2 className="verify-sidebar-title">‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°</h2>
                {isLoading ? (
                    <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
                ) : ownersData.length > 0 ? (
                    <ul className="verify-list">
                        {ownersData.map((owner) => (
                            <li
                                key={owner._id}
                                onClick={() => setSelectedOwner(owner)}
                                className={`verify-list-item ${selectedOwner?._id === owner._id ? "active" : ""}`}
                            >
                                {owner.accountName}
                            </li>
                        ))}
                    </ul>
                ) : (
                    <p className="verify-empty">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</p>
                )}
            </div>

            <div className="verify-content">
                <h2 className="verify-content-title">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h2>
                {selectedOwner ? (
                    <div className="verify-details">
                        <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</strong> {selectedOwner.accountName}</p>
                        <p><strong>‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:</strong> {selectedOwner.bank}</p>
                        <p><strong>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</strong> {selectedOwner.accountNumber}</p>
                        <p><strong>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°:</strong> 
                            {selectedOwner.businessOwnerId
                                ? `${selectedOwner.businessOwnerId.firstName} ${selectedOwner.businessOwnerId.lastName}`
                                : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
                        </p>
                        <p><strong>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:</strong> {selectedOwner.businessOwnerId?.idCard || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>
                        <p><strong>Email:</strong> {selectedOwner.businessOwnerId?.email || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</p>
                        <div>
                          <p><strong>‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô:</strong></p>
                          <div className="verify-doc-box">
                            {selectedOwner.images?.registration ? (
                              <a href={selectedOwner.images.registration} target="_blank" rel="noopener noreferrer">
                                <img src={selectedOwner.images.registration} alt="Registration Document" />
                              </a>
                            ) : (
                              <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</p>
                            )}
                          </div>
                        </div>

                        <div>
                          <p><strong>‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:</strong></p>
                          <div className="verify-img-box">
                            {selectedOwner.images?.idCard ? (
                              <a href={selectedOwner.images.idCard} target="_blank" rel="noopener noreferrer">
                              <img src={selectedOwner.images.idCard} alt="ID Card" />
                              </a>
                            ) : (
                              <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</p>
                            )}
                          </div>
                        </div>

                        <div>
                          <p><strong>‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:</strong></p>
                          <div className="verify-img-box">
                            {selectedOwner.images?.idHolder ? (
                              <a href={selectedOwner.images.idHolder} target="_blank" rel="noopener noreferrer">
                              <img src={selectedOwner.images.idHolder} alt="Selfie with ID" />
                              </a>
                            ) : (
                              <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</p>
                            )}
                          </div>
                        </div>

                        <button className="verify-button delete" onClick={() => setShowRejectPopup(true)}>‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</button>
                        <button className="verify-button confirm" onClick={() => handleApprove(selectedOwner._id)}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</button>
                    </div>
                ) : (
                    <p className="verify-empty">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢</p>
                )}
            </div>

            {showRejectPopup && (
                <div className="verify-popup-overlay">
                    <div className="verify-popup-box">
                        <h3>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</h3>
                        <textarea value={rejectReason} onChange={(e) => setRejectReason(e.target.value)} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..." />
                        <button onClick={() => setShowRejectPopup(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                        <button onClick={handleReject}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default VerifyOwnersPage;
