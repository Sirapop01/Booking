import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { jwtDecode } from "jwt-decode";
import "./StadiumList.css";
import Navbar from "../Navbar/Navbar";
import Swal from "sweetalert2";
import "sweetalert2/dist/sweetalert2.min.css"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ CSS ‡∏Ç‡∏≠‡∏á SweetAlert2
import ChatButton from "../ChatButton/ChatButton"; // ‚úÖ Import ChatButton

function StadiumList() {
    const navigate = useNavigate();
    const [stadiums, setStadiums] = useState([]);
    const [selectedStadium, setSelectedStadium] = useState(null);
    const [loading, setLoading] = useState(false); // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ã‡πâ‡∏≥
    const [ownerId, setOwnerId] = useState(null);
    const [userType, setUserType] = useState(null); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° userType

    useEffect(() => {
        const token = localStorage.getItem("token") || sessionStorage.getItem("token");
        if (!token) {
            alert("Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
            navigate("/login");
            return;
        }
    
        try {
            const decoded = jwtDecode(token);
            console.log("üì¢ Token Decoded:", decoded); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ token
            
            if (!decoded.id || !decoded.role) {
                console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö userId ‡∏´‡∏£‡∏∑‡∏≠ userType ‡πÉ‡∏ô token");
                return;
            }
    
            setOwnerId(decoded.id);
        } catch (error) {
            console.error("‚ùå Error decoding token:", error);
            alert("Session ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
            navigate("/login");
        }
    }, [navigate]);
    

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°
    const fetchStadiumsStatus = async () => {
        try {
            if (!ownerId) {
                console.warn("‚ö†Ô∏è ownerId ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î, ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏î‡πâ");
                return;
            }

            console.log("üì¢ ownerId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ:", ownerId);

            const response = await axios.get(`http://localhost:4000/api/stadium/getArenas?owner_id=${ownerId}`);
            console.log("üì¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà:", response.data);

            if (!response.data || response.data.length === 0) {
                console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ");
            }

            setStadiums(response.data);
        } catch (error) {
            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°:", error);
        }
    };

    useEffect(() => {
        if (ownerId) {
            fetchStadiumsStatus();
        }
    }, [ownerId]); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ ownerId ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á

    // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ô‡∏≤‡∏°
    const toggleStadium = async (arenaId, openState) => {
        try {
            console.log("üì¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ô‡∏≤‡∏°:", arenaId, openState);
            setLoading(true);

            const response = await axios.post(`http://localhost:4000/api/arenas/toggleStatus`, {
                arenaId,
                open: openState,
            });

            console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.data);

            if (response.status === 200) {
                await fetchStadiumsStatus(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà

                Swal.fire({
                    title: openState ? "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" : "‚ùå ‡∏õ‡∏¥‡∏î‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß",
                    text: openState ? "‡∏™‡∏ô‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß" : "‡∏™‡∏ô‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß",
                    icon: openState ? "success" : "warning",
                    confirmButtonColor: "#3085d6",
                    confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
                });
            }
        } catch (error) {
            console.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ô‡∏≤‡∏°:", error);
            Swal.fire({
                title: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
                icon: "error",
                confirmButtonColor: "#d33",
                confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
            });
        } finally {
            setLoading(false);
        }
    };

    const deleteStadium = async (arenaId) => {
        Swal.fire({
            title: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
            text: "‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#28a745", // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            cancelButtonColor: "#d33", // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á
            confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢!",
            cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    await axios.delete(`http://localhost:4000/api/arenas/deleteArena/${arenaId}`);
                    await fetchStadiumsStatus(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    
                    setSelectedStadium(null); // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ selectedStadium
                    Swal.fire("‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏™‡∏ô‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß", "success");
                } catch (error) {
                    console.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°:", error);
                    Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏î‡πâ", "error");
                }
            }
        });
    };
    
    
    
    return (
        <div className="stadium-page-container">
            <Navbar/>

            {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° ChatButton ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ */}
            {ownerId && userType && <ChatButton userId={ownerId} userType={userType} />}

            {/* ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏° */}
            <table className="stadium-table-stadiumlist">
                <thead>
                    <tr>
                        <th style={{ width: "25%" }}>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°</th>
                        <th style={{ width: "20%" }}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                        <th style={{ width: "20%" }}>‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î</th>
                        <th style={{ width: "25%" }}>‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</th>
                    </tr>
                </thead>
                <tbody>
                    {stadiums.length > 0 ? (
                        stadiums.map((stadium) => {
                            const isSelected = selectedStadium === stadium._id;
                            return (
                                <tr
                                    key={stadium._id}
                                    className={`table-row-stadiumlist ${isSelected ? "selected" : ""}`}
                                    onClick={() => setSelectedStadium(isSelected ? null : stadium._id)}
                                >
                                    <td className="stadium-name-stadiumlist">{stadium.fieldName ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠"}</td>
                                    <td className="status-stadiumlist">{stadium.open ? "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" : "‚ùå ‡∏õ‡∏¥‡∏î"}</td>
                                    <td className="status-toggle-stadiumlist">
                                        <span>{stadium.open ? "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î" : "‚ùå ‡∏õ‡∏¥‡∏î"}</span>
                                    </td>
                                    <td className="action-buttons-stadiumlist">
                                        <button
                                            className={`toggle-btn-stadiumlist ${stadium.open ? "btn-close-stadiumlist" : "btn-open-stadiumlist"}`}
                                            onClick={(e) => {
                                                e.stopPropagation();
                                                toggleStadium(stadium._id, !stadium.open);
                                            }}
                                            disabled={loading}
                                        >
                                            {stadium.open ? "‚ùå ‡∏õ‡∏¥‡∏î‡∏™‡∏ô‡∏≤‡∏°" : "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏ô‡∏≤‡∏°"}
                                        </button>
                                    </td>
                                </tr>
                            );
                        })
                    ) : (
                        <tr>
                            <td colSpan="4" className="no-data-stadiumlist">‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</td>
                        </tr>
                    )}
                </tbody>
            </table>

            {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á */}
            <div className="bottom-buttons-stadiumlist">
                <button 
                    className={`btn-stadiumlist ${selectedStadium ? "" : "disabled"}`} 
                    onClick={() => navigate(`/Registerarena/${selectedStadium}`)} 
                    disabled={!selectedStadium}
                    >
                ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </button>

                <button onClick={() => navigate("/Registerarena")} className="btn-stadiumlist">
                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
                </button>

                <button 
                    className={`btn-stadiumlist ${selectedStadium ? "" : "disabled"}`} 
                    onClick={() => navigate(`/manage-sub-stadium/${selectedStadium}`)} 
                    disabled={!selectedStadium}
                    >
                ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢
                </button>

                {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" */}
                <button 
                    className={`confirm-booking-btn ${selectedStadium ? "" : "disabled"}`} 
                    onClick={() => navigate(`/confirm-bookings/${selectedStadium}`)}
                    disabled={!selectedStadium}
                >
                    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
                </button>


                <button 
                    className={`delete-btn-stadiumlist ${selectedStadium ? "" : "disabled"}`} 
                    onClick={() => deleteStadium(selectedStadium)}
                    disabled={!selectedStadium}
                    >
                ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°
                </button>

            </div>
        </div>
    );
}

export default StadiumList;
