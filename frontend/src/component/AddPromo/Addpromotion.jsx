import React, { useState, useEffect } from "react";
import axios from "axios";
import { jwtDecode } from "jwt-decode"; // ‡πÉ‡∏ä‡πâ jwtDecode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á ownerId
import "./Addpromotion.css";
import Navbar from "../Navbar/Navbar";
import uploadIcon from "../assets/icons/add.png";
import Swal from "sweetalert2";


const Addpromotion = () => {
  const [image, setImage] = useState(null);
  const [file, setFile] = useState(null);
  const [sportsTypes, setSportsTypes] = useState([]);
  const [arenas, setArenas] = useState([]); //  ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
  const [formData, setFormData] = useState({
    promotionTitle: "",
    description: "",
    arenaId: "",
    sportName: "",
    discount: "",
    startDate: "",
    endDate: "",
    startHour: "",
    startMinute: "",
    endHour: "",
    endMinute: "",
  });

 
  //  ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
  useEffect(() => {
    const token = localStorage.getItem("token") || sessionStorage.getItem("token");
  
    if (!token) {
      alert("Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
      window.location.href = "/login";
      return;
    }
  
    try {
      const decoded = jwtDecode(token);
      const ownerId = decoded.id;
  
      if (!ownerId) {
        console.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡πÉ‡∏ô Token");
        return;
      }
  
      const fetchArenas = async () => {
        try {
          const response = await axios.get(`http://localhost:4000/api/stadium/getArenas?owner_id=${ownerId}`);
          if (response.data.length > 0) {
            setArenas(response.data);
          } else {
            setArenas([]);
          }
        } catch (error) {
          console.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°:", error);
        }
      };
  
      fetchArenas();
    } catch (error) {
      console.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ Token:", error);
      alert("Session ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
      window.location.href = "/login";
    }
  }, []);
  
  //  ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏°
  useEffect(() => {
    if (!formData.arenaId) {
      setSportsTypes([]); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤
      return;
    }
  
    const fetchSportsTypes = async () => {
      try {
        const response = await axios.get(`http://localhost:4000/api/sportscategories/sportscate?arenaId=${formData.arenaId}`);

        if (response.data && response.data.length > 0) {
          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
          const uniqueSports = [...new Map(response.data.map(item => [item.sportName, item])).values()];
          setSportsTypes(uniqueSports);
        } else {
          setSportsTypes([]); // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        }
      } catch (error) {
        console.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤:", error);
        setSportsTypes([]);
      }
    };
    
  
    fetchSportsTypes();
  }, [formData.arenaId]);
  
  //  ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ô‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤‡πÉ‡∏´‡∏°‡πà
  const handleArenaChange = (e) => {
    const selectedArenaId = e.target.value;
  
    setFormData((prevFormData) => ({
      ...prevFormData,
      arenaId: selectedArenaId || "",
      sportName: "", // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ô‡∏≤‡∏°
    }));
  
    if (!selectedArenaId) {
      setSportsTypes([]); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤
    }
  };
  
  //  ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤
  const handleTypeChange = (e) => {
    setFormData((prevFormData) => ({
      ...prevFormData,
      sportName: e.target.value, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ type
    }));
  };

  const handleRemoveImage = () => {
    setImage(null);
    setFile(null);
  };

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(URL.createObjectURL(file));
      setFile(file);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
  
    if (name === "endDate" && value < formData.startDate) {
      alert("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô");
      return;
    }
  
    if (name === "discount" && value < 0) {
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡πÑ‡∏î‡πâ");
      return;
    }
  
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };
  
  
  
  
  //  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
  const handleSubmit = async (e) => {
    e.preventDefault();
  
    const token = localStorage.getItem("token") || sessionStorage.getItem("token");
    if (!token) {
      alert("Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
      window.location.href = "/login";
      return;
    }
  
    let ownerId = "";
    try {
      const decoded = jwtDecode(token);
      ownerId = decoded.id;
    } catch (error) {
      console.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ Token:", error);
      alert("Session ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
      window.location.href = "/login";
      return;
    }
  
    if (!formData.promotionTitle || !formData.arenaId || !formData.sportName || !formData.discount || !formData.startDate || !formData.endDate || !file) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û");
      return;
    }
  
    try {
      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary ‡∏Å‡πà‡∏≠‡∏ô
      const formDataImage = new FormData();
      formDataImage.append("promotionImage", file);
      
      console.log("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary...");
      const uploadResponse = await axios.post("http://localhost:4000/api/promotions/upload", formDataImage, {
        headers: { "Content-Type": "multipart/form-data" },
      });
  
      console.log(" ‡∏£‡∏π‡∏õ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:", uploadResponse.data);
      const imageUrl = uploadResponse.data.imageUrl;
  
      const timeRange = `${formData.startHour}:${formData.startMinute} - ${formData.endHour}:${formData.endMinute}`;
      
      //  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ `type` ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    console.log("üü¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤:", formData.sportName);
    
      //  ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend
      const formDataToSend = {
        ownerId,
        promotionTitle: formData.promotionTitle,
        description: formData.description,
        stadiumId: formData.arenaId,
        sportName: formData.sportName,
        discount: formData.discount,
        startDate: formData.startDate,
        endDate: formData.endDate,
        timeRange,
        imageUrl, //  ‡πÉ‡∏ä‡πâ URL ‡∏à‡∏≤‡∏Å Cloudinary
      };
  
      console.log("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend:", formDataToSend);
  
      const response = await axios.post("http://localhost:4000/api/promotions", formDataToSend, {
        headers: { Authorization: `Bearer ${token}` },
      });
  
      Swal.fire({
              title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
              text: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
              icon: "success",
              confirmButtonColor: "#3085d6",
              confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
            }).then(() => {
              window.location.href = "/"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            });
    } catch (error) {
      Swal.fire({
        title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        text: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        icon: "error",
        confirmButtonColor: "#3085d6",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      }).then(() => {
        window.location.reload(); //  ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
      });
    }
  };

  return (
    <div className="promotion-container">
      <Navbar />
      <h1 className="page-title">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£</h1>
      <div className="form-container">
        <div className="image-upload-section">
          <h2>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</h2>
          <div className="image-box">
            {image ? (
              <div className="uploaded-container">
                <img src={image} alt="Uploaded" className="uploaded-image" />
                <button className="remove-image-button" onClick={handleRemoveImage}>
                  ‡∏•‡∏ö‡∏£‡∏π‡∏õ
                </button>
              </div>
            ) : (
              <label htmlFor="imageUpload" className="upload-label">
                <img src={uploadIcon} alt="Upload" className="upload-icon" />
                <input type="file" id="imageUpload" accept="image/*" onChange={handleImageUpload} hidden />
              </label>
            )}
          </div>
        </div>

        <form className="promotion-form" onSubmit={handleSubmit}>
          <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</h2>
          <div className="input-group">
            <label>‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô : *</label>
            <input type="text" name="promotionTitle" value={formData.promotionTitle} onChange={handleChange} required />
          </div>

          <div className="input-group">
            <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô :</label>
            <input name="description" value={formData.description} onChange={handleChange} rows="3"/>
          </div>

          <div className="input-group">
            <label>‡∏ä‡∏∑‡πà‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏° : *</label>
            <select name="arenaId" value={formData.arenaId} onChange={handleArenaChange} required>
              <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏° --</option>
              {arenas.map((arena) => (
                <option key={arena._id} value={arena._id}>{arena.fieldName}</option>
              ))}
            </select>
          </div>

          <div className="input-group">
            <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤ : *</label>
            <select name="sportName" value={formData.sportName} onChange={handleTypeChange} required>
              <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤ --</option>
              {sportsTypes.map((sport) => (
                <option key={sport._id} value={sport.sportName}>{sport.sportName}</option>
              ))}
            </select>
          </div>

          <div className="input-group">
            <label>‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤(%) : *</label>
            <input type="number" name="discount" value={formData.discount} onChange={handleChange} required />
          </div>

          <div className="date-group">
            <label>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ : *</label>
            <label>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</label>
            <input type="date" name="startDate" value={formData.startDate} onChange={handleChange} required />
            <label>‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
            <input type="date" name="endDate" value={formData.endDate} onChange={handleChange} required />
          </div>

          <div className="input-group">
            <label>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ : *</label>
            <input type="time" name="startHour" value={formData.startHour} onChange={handleChange} required />
            <input type="time" name="endHour" value={formData.endHour} onChange={handleChange} required />
          </div>

          <button type="submit" className="submit-button">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</button>
        </form>
      </div>
    </div>
  );
};

export default Addpromotion;