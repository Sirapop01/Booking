import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import Swal from "sweetalert2";
import Navbar from "../Navbar/Navbar";
import axios from "axios";
import "./Booking.css";

const Booking = () => {
  const location = useLocation();
  const selectedSubStadiums = location.state?.selectedSubStadiums || [];
  const [bookingData, setBookingData] = useState({});
  const [selectedDate, setSelectedDate] = useState("");

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á format ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ backend
  const formatDateForAPI = (dateString) => {
    if (!dateString) return "";
    const date = new Date(dateString);
    return date.toISOString().split("T")[0]; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
  };

  useEffect(() => {
    if (!selectedDate) {
      console.warn("‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }

    const formattedDate = formatDateForAPI(selectedDate);

    selectedSubStadiums.forEach((stadium) => {
      fetchStadiumDetails(stadium._id, formattedDate);
    });
  }, [selectedSubStadiums, selectedDate]);

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
  const fetchStadiumDetails = async (subStadiumId, selectedDate) => {
    try {
      console.log(`üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°: ${subStadiumId} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${selectedDate}`);

      // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏ö `date`
      const response = await axios.get(
        `http://localhost:4000/api/substadiums/details/${subStadiumId}?date=${selectedDate}`
      );

      const { openTime, closeTime, reservedSlots = [] } = response.data;

      const availableTimes = generateTimeSlots(openTime, closeTime, reservedSlots);

      console.log("‚è≥ Available Time Slots:", availableTimes);

      setBookingData((prev) => ({
        ...prev,
        [subStadiumId]: { availableTimes, selectedTime: "", openTime, closeTime },
      }));
    } catch (error) {
      console.error("‚ùå Error fetching stadium details:", error);
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î (‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
  const generateTimeSlots = (openTime, closeTime, reservedSlots = []) => {
    console.log("‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Time Slots:", openTime, "‡∏ñ‡∏∂‡∏á", closeTime);
    console.log("‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á:", reservedSlots);

    let times = [];
    let startHour = parseInt(openTime.split(":")[0]);
    let endHour = parseInt(closeTime.split(":")[0]);
    let currentHour = startHour;
    let isCrossDay = endHour < startHour;

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `reservedSlots` ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    const reservedSet = new Set(reservedSlots.map((slot) => slot.trim()));

    while (true) {
      let nextHour = (currentHour + 1) % 24;
      let timeSlot = `${currentHour.toString().padStart(2, "0")}:00 - ${nextHour.toString().padStart(2, "0")}:00`;

      let isReserved = reservedSet.has(timeSlot);
      times.push({ time: timeSlot, reserved: isReserved });

      currentHour = nextHour;
      if (!isCrossDay && currentHour >= endHour) break;
      if (isCrossDay && currentHour === endHour) break;
    }

    console.log("‚úÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á:", times);
    return times;
  };

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Popup ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
  const showAvailableTimes = (subStadiumId) => {
    const timeslots = bookingData[subStadiumId]?.availableTimes || [];

    console.log("üïí Available Time Slots:", timeslots);

    if (timeslots.length === 0) {
      Swal.fire("‚ö† ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô", "warning");
      return;
    }

    Swal.fire({
      title: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
      html: `
            <div class="time-slot-container">
                ${timeslots
                  .map(
                    (slot, index) => `
                        <button class="time-slot ${slot.reserved ? "reserved" : ""}" 
                            data-index="${index}" 
                            ${slot.reserved ? "disabled" : ""}>
                            ${slot.time}
                        </button>`
                  )
                  .join("")}
            </div>`,
      showCancelButton: true,
      cancelButtonText: "‡∏õ‡∏¥‡∏î",
      showConfirmButton: true,
      confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
      didOpen: () => {
        let selectedTimes = [];
        document.querySelectorAll(".time-slot").forEach((button) => {
          button.addEventListener("click", () => {
            const index = button.getAttribute("data-index");
            const time = timeslots[index].time;

            if (selectedTimes.includes(time)) {
              selectedTimes = selectedTimes.filter((t) => t !== time);
              button.classList.remove("selected");
            } else {
              selectedTimes.push(time);
              button.classList.add("selected");
            }
          });
        });

        Swal.getConfirmButton().addEventListener("click", () => {
          if (selectedTimes.length === 0) {
            Swal.fire("‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "", "warning");
            return;
          }
          setBookingData((prev) => ({
            ...prev,
            [subStadiumId]: { ...prev[subStadiumId], selectedTime: selectedTimes.join(", ") },
          }));
          Swal.close();
        });
      },
    });
  };

  return (
    <div className="booking-container">
      <Navbar />
      <div className="booking-content">
        <div className="booking-left">
          <img src={selectedSubStadiums[0]?.images?.[0] || "https://via.placeholder.com/400"} alt="Stadium" className="booking-image" />
        </div>

        <div className="booking-right">
          {selectedSubStadiums.length > 0 ? (
            selectedSubStadiums.map((sub) => (
              <div key={sub._id} className="booking-form">
                <h2 className="booking-title">{sub.name}</h2>

                <div className="booking-info">
                  <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á</label>
                  <input
                    type="date"
                    className="input-field"
                    value={selectedDate}
                    onChange={(e) => setSelectedDate(e.target.value)}
                    required
                  />

                  <label>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤</label>
                  <input
                    type="text"
                    className="input-field"
                    value={bookingData[sub._id]?.selectedTime || ""}
                    readOnly
                    onClick={() => showAvailableTimes(sub._id)}
                    placeholder="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤"
                  />
                  <p className="booking-price">‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ø {sub.price || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"} / ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</p>
                </div>
              </div>
            ))
          ) : (
            <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default Booking;
