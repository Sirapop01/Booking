import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import "./BookingArena.css";
import { FaHeart } from "react-icons/fa"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à
import { jwtDecode } from "jwt-decode";
import Swal from "sweetalert2";

const BookingArena = () => {
  const { id } = useParams(); // ‡∏£‡∏±‡∏ö arenaId ‡∏à‡∏≤‡∏Å URL
  const navigate = useNavigate();
  const [arena, setArena] = useState(null);
  const [sports, setSports] = useState([]);
  const [subStadiums, setSubStadiums] = useState({});
  const [loading, setLoading] = useState(true);
  const [selectedSubStadiums, setSelectedSubStadiums] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [isFavorite, setIsFavorite] = useState(false); // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏ô‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const [userId, setUserId] = useState(null); // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ userId

  useEffect(() => {
    const storedToken = localStorage.getItem("token") || sessionStorage.getItem("token");
    if (storedToken) {
      try {
        const decoded = jwtDecode(storedToken);
        setUserId(decoded.id); // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ userId
      } catch (error) {
        console.error("‚ö†Ô∏è Error decoding token:", error);
      }
    }
}, []);

useEffect(() => {
  axios.get(`http://localhost:4000/api/arenas/getArenaById/${id}`)
      .then((response) => {
          console.log("‚úÖ Loaded arena data:", response.data);
          setArena(response.data);
      })
      .catch((error) => console.error("Error fetching arena data:", error));
}, [id]);


  useEffect(() => {
    axios.get(`http://localhost:4000/api/sports/${id}`)
      .then((response) => setSports(response.data))
      .catch((error) => console.error("Error fetching sports categories:", error));
  }, [id]);

  useEffect(() => {
    if (sports.length > 0) {
      const fetchSubStadiums = async () => {
        let groupedSubStadiums = {};
        for (const sport of sports) {
          try {
            const response = await axios.get(`http://localhost:4000/api/substadiums/${id}/${sport._id}`);
            groupedSubStadiums[sport.sportName] = response.data;
          } catch (error) {
            console.error(`Error fetching sub-stadiums for sport ${sport.sportName}:`, error);
          }
        }
        setSubStadiums(groupedSubStadiums);
        setLoading(false);
      };
      fetchSubStadiums();
    } else {
      setLoading(false);
    }
  }, [sports, id]);

  useEffect(() => {
    if (userId) {
        axios.get(`http://localhost:4000/api/favoritearena/check/${id}?userId=${userId}`)
            .then((response) => {
                setIsFavorite(response.data.isFavorite);
            })
            .catch((error) => console.error("‚ùå Error checking favorite status:", error));
    }
}, [userId, id]);



const toggleFavorite = async () => {
  try {
    if (!userId) {
      Swal.fire({
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö!",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î",
        icon: "warning",
        confirmButtonColor: "#3085d6",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
      return;
    }

    console.log("üìå Sending data:", { userId, stadiumId: id });

    if (isFavorite) {
      // üîΩ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
      await axios.delete(`http://localhost:4000/api/favoritearena/${id}`, {
        data: { userId },
      });

      setIsFavorite(false);

      // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      Swal.fire({
        title: "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        text: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß",
        icon: "success",
        confirmButtonColor: "#3085d6",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
    } else {
      // üîΩ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
      await axios.post("http://localhost:4000/api/favoritearena", 
        { userId, stadiumId: id },
        { headers: { "Content-Type": "application/json" } }
      );

      setIsFavorite(true);

      // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      Swal.fire({
        title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        text: "‡∏™‡∏ô‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß",
        icon: "success",
        confirmButtonColor: "#3085d6",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
    }
  } catch (error) {
    console.error("‚ùå Error toggling favorite:", error.response ? error.response.data : error);

    // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    Swal.fire({
      title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
      text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏î‡πâ",
      icon: "error",
      confirmButtonColor: "#d33",
      confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
    });
  }
};



  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢
  const toggleSubStadiumSelection = (subStadiumId) => {
    setSelectedSubStadiums((prev) =>
      prev.includes(subStadiumId)
        ? prev.filter((id) => id !== subStadiumId)
        : [...prev, subStadiumId]
    );
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const handleBooking = () => {
    if (selectedSubStadiums.length > 0) {
      navigate(`/booking`, { state: { selectedSubStadiums } });
    } else {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á!");
    }
  };

  if (loading) return <div className="loading-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>;
  if (!arena) return <div className="loading-text">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤</div>;

  return (
    <div className="booking-arena-container">
      <div className="arena-card">
        <div className="main-image-container">
          <img
            src={arena.images.length > 0 ? arena.images[0] : "https://via.placeholder.com/400"}
            alt={arena.fieldName}
            className="main-image"
          />
        </div>

        <div className="arena-info-container">
          <div className="arena-left-section">
            {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡πÜ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏° */}
            <h2 className="arena-title">
              {arena.fieldName} 
              <span className={`status-badge ${arena.open ? "open" : "closed"}`}>
                {arena.open ? "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á" : "‚ùå ‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"}
              </span>
              <div className="favorite-container78">
    <FaHeart
        className={`heart-icon ${isFavorite ? "liked" : ""}`}
        onClick={toggleFavorite} 
        style={{ color: isFavorite ? "red" : "gray", cursor: "pointer" }}
    />
    <span className="favorite-text78">
        {isFavorite ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î"}
    </span>
</div>

            </h2>

            <div className="google-map-box">
              {arena.location?.coordinates?.length === 2 && (
                <iframe
                  src={`https://www.google.com/maps?q=${arena.location.coordinates[1]},${arena.location.coordinates[0]}&z=14&output=embed`}
                  title="Google Maps"
                  className="google-map"
                  allowFullScreen
                  loading="lazy"
                />
              )}
            </div>

            <div className="amenities-section">
              <h3>‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å</h3>
              <div className="amenities-list">
                {arena.amenities.map((item, index) => (
                  <span key={index} className="amenity-item">‚úÖ {item}</span>
                ))}
              </div>
            </div>

            <div className="booking-conditions">
              <h3>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h3>
              <p>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: {arena.startTime} - {arena.endTime}</p>
              <p>{arena.additionalInfo}</p>
            </div>
          </div>

          {/* ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢ */}
          <div className="grouped-sub-stadiums">
            {Object.entries(subStadiums).length > 0 ? (
              Object.entries(subStadiums).map(([sportName, stadiums]) => (
                <div key={sportName} className="sport-group">
                  <h3 className="sport-title">{sportName}</h3>
                  <div className="sub-stadium-row">
                    {stadiums.map((sub) => (
                      <button
                        key={sub._id}
                        className={`sub-stadium-button ${selectedSubStadiums.includes(sub._id) ? "selected" : ""}`}
                        onClick={() => toggleSubStadiumSelection(sub._id)}
                      >
                        <img src={sub.images.length > 0 ? sub.images[0] : "https://via.placeholder.com/150"} alt={sub.name} />
                        <p>{sub.name}</p>
                      </button>
                    ))}
                  </div>
                </div>
              ))
            ) : (
              <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
            )}
          </div>
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏≠‡∏á */}
        <button className="booking-button" onClick={handleBooking}>
          ‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏° ({selectedSubStadiums.length})
        </button>
      </div>
    </div>
  );
};

export default BookingArena;
