import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import "./BookingArena.css";
import { FaHeart } from "react-icons/fa"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à
import { jwtDecode } from "jwt-decode";
import Swal from "sweetalert2";
import Navbar from '../Navbar/Navbar';
import Slider from "react-slick";

const BookingArena = () => {
  const { id } = useParams(); // ‡∏£‡∏±‡∏ö arenaId ‡∏à‡∏≤‡∏Å URL
  const navigate = useNavigate();
  const [arena, setArena] = useState(null);
  const [sports, setSports] = useState([]);
  const [subStadiums, setSubStadiums] = useState({});
  const [loading, setLoading] = useState(true);
  const [selectedSubStadiums, setSelectedSubStadiums] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [isFavorite, setIsFavorite] = useState(false); // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏ô‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const [userId, setUserId] = useState(null); // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ userId
  const [reviews, setReviews] = useState([]);
  const imageCount = arena?.images?.length || 0;
  const API_URL = "http://localhost:4000/api";

  const settings = {
    dots: true, // Show navigation dots
    infinite: true, // Infinite scroll
    speed: 500,
    slidesToShow: 1, // Show 1 image at a time
    slidesToScroll: 1, // Scroll 1 image at a time
    autoplay: true, // Auto slide images
    autoplaySpeed: 2000, 
  };

  const reviewSettings = {
    dots: true,            // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
    infinite: true,        // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ
    speed: 500,            // ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    slidesToShow: 2,       // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á 2 ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
    slidesToScroll: 1,     // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
    autoplay: true,        // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    autoplaySpeed: 3000,   // ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß (3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    adaptiveHeight: true,  // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
  };
  


  useEffect(() => {
    const storedToken = localStorage.getItem("token") || sessionStorage.getItem("token");
    if (storedToken) {
        try {
            const decoded = jwtDecode(storedToken);
            console.log("‚úÖ Token Decoded:", decoded); // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ Token
            setUserId(decoded.id); // üî• ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å `userId` ‡πÄ‡∏õ‡πá‡∏ô `id`
        } catch (error) {
            console.error("‚ö†Ô∏è Error decoding token:", error);
        }
    }
}, []);

useEffect(() => {
  axios.get(`${API_URL}/arenas/getArenaById/${id}`)
      .then((response) => {
          setArena(response.data);
          setLoading(false);
      })
      .catch((error) => {
          console.error("Error fetching arena data:", error);
          setLoading(false);
      });

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°
  axios.get(`${API_URL}/reviews/${id}`)
      .then((response) => {
          setReviews(response.data.reviews || []);
      })
      .catch((error) => console.error("Error fetching reviews:", error));
}, [id]);

useEffect(() => {
  const fetchReviews = async () => {
    try {
      setReviews([]); // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
      const response = await axios.get(`${API_URL}/reviews/${id}`);
      console.log("üìå Reviews Loaded:", response.data.reviews); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Response

      // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥
      const uniqueReviews = response.data.reviews.filter((v, i, a) => 
        a.findIndex(t => (t._id === v._id)) === i
      );

      setReviews(uniqueReviews || []);
    } catch (error) {
      console.error("üö® Error fetching reviews:", error);
    }
  };

  fetchReviews();
}, [id]); 




useEffect(() => {
  axios.get(`http://localhost:4000/api/arenas/getArenaById/${id}`)
      .then((response) => {
          console.log("‚úÖ Loaded arena data:", response.data);
          setArena(response.data);
      })
      .catch((error) => console.error("Error fetching arena data:", error));
}, [id]);


  useEffect(() => {
    axios.get(`http://localhost:4000/api/sports/${id}`)
      .then((response) => setSports(response.data))
      .catch((error) => console.error("Error fetching sports categories:", error));
  }, [id]);

  useEffect(() => {
    if (sports.length > 0) {
      const fetchSubStadiums = async () => {
        let groupedSubStadiums = {};
        for (const sport of sports) {
          try {
            const response = await axios.get(`http://localhost:4000/api/substadiums/${id}/${sport._id}`);
            groupedSubStadiums[sport.sportName] = response.data;
          } catch (error) {
            console.error(`Error fetching sub-stadiums for sport ${sport.sportName}:`, error);
          }
        }
        setSubStadiums(groupedSubStadiums);
        setLoading(false);
      };
      fetchSubStadiums();
    } else {
      setLoading(false);
    }
  }, [sports, id]);

  useEffect(() => {
    if (userId) {
        axios.get(`http://localhost:4000/api/favoritearena/check/${id}?userId=${userId}`)
            .then((response) => {
                setIsFavorite(response.data.isFavorite);
            })
            .catch((error) => console.error("‚ùå Error checking favorite status:", error));
    }
}, [userId, id]);



const toggleFavorite = async () => {
  try {
    if (!userId) {
      Swal.fire({
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö!",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î",
        icon: "warning",
        confirmButtonColor: "#3085d6",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
      return;
    }

    console.log("üìå Sending data:", { userId, stadiumId: id });

    if (isFavorite) {
      // üîΩ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
      await axios.delete(`http://localhost:4000/api/favoritearena/${id}`, {
        data: { userId },
      });

      setIsFavorite(false);

      // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      Swal.fire({
        title: "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        text: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß",
        icon: "success",
        confirmButtonColor: "#3085d6",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
    } else {
      // üîΩ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
      await axios.post("http://localhost:4000/api/favoritearena", 
        { userId, stadiumId: id },
        { headers: { "Content-Type": "application/json" } }
      );

      setIsFavorite(true);

      // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      Swal.fire({
        title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        text: "‡∏™‡∏ô‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß",
        icon: "success",
        confirmButtonColor: "#3085d6",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
    }
  } catch (error) {
    console.error("‚ùå Error toggling favorite:", error.response ? error.response.data : error);

    // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    Swal.fire({
      title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
      text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏î‡πâ",
      icon: "error",
      confirmButtonColor: "#d33",
      confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
    });
  }
};



const toggleSubStadiumSelection = (subStadiumId) => {
  setSelectedSubStadiums((prev) => {
      const isSelected = prev.some((sub) => sub._id === subStadiumId);

      if (isSelected) {
          return prev.filter((sub) => sub._id !== subStadiumId);
      } else {
          const sportKey = Object.keys(subStadiums).find((sport) =>
              subStadiums[sport].some((sub) => sub._id === subStadiumId)
          );
          const subStadium = subStadiums[sportKey]?.find((sub) => sub._id === subStadiumId);

          if (!subStadium) return prev;

          console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", subStadium); // Debug ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤

          return [
              ...prev,
              {
                  _id: subStadium._id,
                  name: subStadium.name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠",
                  arenaId: subStadium.arenaId || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                  ownerId: subStadium.owner_id || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                  sportName: sportKey || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
                  images: subStadium.images || [],
                  price: subStadium.price || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤",
              },
          ];
      }
  });
};





const handleBooking = () => {
  const token = localStorage.getItem("token") || sessionStorage.getItem("token");

  if (!token) {
      Swal.fire("‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á", "", "warning");
      return;
  }

  try {
      const decodedToken = JSON.parse(atob(token.split(".")[1])); 
      const userId = decodedToken?.id; 

      if (!userId) {
          Swal.fire("‚ö† ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà", "", "warning");
          return;
      }

      if (selectedSubStadiums.length > 0) {
          console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Booking:", selectedSubStadiums); // Debug

          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏°‡∏µ name ‡πÅ‡∏•‡∏∞ price
          const hasInvalidData = selectedSubStadiums.some(sub => !sub.name || !sub.price);
          if (hasInvalidData) {
              Swal.fire("‚ö† ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå", "‡∏ö‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà", "warning");
              return;
          }

          navigate(`/booking`, { state: { selectedSubStadiums, userId } });
      } else {
          Swal.fire({
              title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏°!",
              text: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
              icon: "warning",
              confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          });
      }
  } catch (error) {
      console.error("‚ùå Error decoding token:", error);
      Swal.fire("‚ùå Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà", "", "error");
  }
};



  if (loading) return <div className="loading-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>;
  if (!arena) return <div className="loading-text">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤</div>;

  return (
    <>
      {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Navbar */}
      <Navbar />

      <div className="booking-arena-container">
        <div className="arena-card">
          <div className="main-image-container">
            {imageCount > 1 ? ( // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ
              <Slider {...settings}>
                {arena.images.map((image, index) => (
                  <div key={index}>
                    <img
                      src={image}
                      alt={arena.fieldName}
                      className="main-image"
                    />
                  </div>
                ))}
              </Slider>
            ) : (
              <img
                src={arena.images[0] || "https://via.placeholder.com/400"}
                alt={arena.fieldName}
                className="main-image"
              />
            )}
          </div>

          <div className="arena-info-container">
            <div className="arena-left-section">
              {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡πÜ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏° */}
              <h2 className="arena-title">
                {arena.fieldName} 
                <span className={`status-badge ${arena.open ? "open" : "closed"}`}>
                  {arena.open ? "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á" : "‚ùå ‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"}
                </span>
                <div className="favorite-container78">
                  <FaHeart
                    className={`heart-icon ${isFavorite ? "liked" : ""}`}
                    onClick={toggleFavorite} 
                    style={{ color: isFavorite ? "red" : "gray", cursor: "pointer" }}
                  />
                  <span className="favorite-text78">
                    {isFavorite ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î"}
                  </span>
                </div>
              </h2>
               {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ */}
            {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ */}
            <h3>‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h3>
{reviews.length > 0 ? (
  <Slider {...reviewSettings}>  {/* ‚úÖ ‡πÉ‡∏ä‡πâ Slider */}
    {reviews.map((review) => (
      <div key={review._id} className="review-item">
        <p><strong>{review.userId?.firstName || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠"} {review.userId?.lastName || ""}</strong></p>
        <p>‚≠ê {review.rating}</p>
        <p>{review.comment}</p>
      </div>
    ))}
  </Slider>
) : (
  <p>‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</p>
)}


              <div className="google-map-box">
                {arena.location?.coordinates?.length === 2 && (
                  <iframe
                    src={`https://www.google.com/maps?q=${arena.location.coordinates[1]},${arena.location.coordinates[0]}&z=14&output=embed`}
                    title="Google Maps"
                    className="google-map"
                    allowFullScreen
                    loading="lazy"
                  />
                )}
              </div>

              <div className="amenities-section">
                <h3>‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å</h3>
                <div className="amenities-list">
                  {arena.amenities.map((item, index) => (
                    <span key={index} className="amenity-item">‚úÖ {item}</span>
                  ))}
                </div>
              </div>

              <div className="booking-conditions">
                <h3>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h3>
                <p>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: {arena.startTime} - {arena.endTime}</p>
                <p>{arena.additionalInfo}</p>
              </div>
            </div>

            {/* ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢ */}
            <div className="grouped-sub-stadiums">
              {Object.entries(subStadiums).length > 0 ? (
                Object.entries(subStadiums).map(([sportName, stadiums]) => (
                  <div key={sportName} className="sport-group">
                    <h3 className="sport-title">{sportName}</h3>
                    <div className="sub-stadium-row">
                      {stadiums.map((sub) => (
                        <button
                        key={sub._id}
                        className={`sub-stadium-button ${selectedSubStadiums.some(s => s._id === sub._id) ? "selected" : ""}`}
                        onClick={() => toggleSubStadiumSelection(sub._id)}
                      >
                        {/* ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢ */}
                        <img src={sub.images.length > 0 ? sub.images[0] : "https://via.placeholder.com/150"} alt={sub.name} />
                      
                        {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢ */}
                        <p>{sub.name}</p>
                      
                        {/* ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö */}
                        <svg viewBox="0 0 180 140">
                          <polyline points="1,1 179,1 179,139 1,139 1,1"/>
                        </svg>
                      </button>
                      
                      ))}
                    </div>
                  </div>
                ))
              ) : (
                <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
              )}
            </div>
          </div>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏≠‡∏á */}
        <button className="booking101-button" onClick={handleBooking}>
          ‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏° ({selectedSubStadiums.length})
        </button>
      </div>
      </div>
    </>
  );
};

export default BookingArena;
