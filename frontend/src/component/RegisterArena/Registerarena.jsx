import React, { useState, useEffect } from "react";
import axios from "axios";
import "./Registerarena.css";
import logo from '../assets/logo.png';
import { jwtDecode } from "jwt-decode";
import Mapping from "../Mapping/Mapping"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Mapping
import TimePicker from "react-time-picker"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Time Picker
import "react-time-picker/dist/TimePicker.css"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ CSS
import "react-clock/dist/Clock.css"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Clock UI

const DEFAULT_LOCATION = [13.736717, 100.523186]; // ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø)

const MatchWebForm = () => {
  const [images, setImages] = useState([]);
  const [errorMessage, setErrorMessage] = useState("");
  const [formErrors, setFormErrors] = useState("");
  const [mapLocation, setMapLocation] = useState(DEFAULT_LOCATION); // ‚úÖ state ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà

  const [formData, setFormData] = useState({
    fieldName: "",
    ownerName: "",
    phone: "",
    startTime: "",  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å workingHours ‡πÄ‡∏õ‡πá‡∏ô startTime & endTime
    endTime: "",
    location: DEFAULT_LOCATION,
    businessOwnerId: "",
    additionalInfo: "",
    amenities: []
  });


  const getAmenityLabel = (key) => {
    const labels = {
      ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ: "‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ",
      WiFi: "WiFi",
      ‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå: "‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå",
      ‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥: "‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥",
      ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏ä‡πà‡∏≤: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏ä‡πà‡∏≤",
      ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤: "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
      ‡∏≠‡∏∑‡πà‡∏ô‡πÜ: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    };
    return labels[key] || key;
  };

  // ‚úÖ ‡∏î‡∏∂‡∏á Business Owner ID ‡∏à‡∏≤‡∏Å Token ‡∏´‡∏£‡∏∑‡∏≠ Email ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  useEffect(() => {
    const fetchBusinessOwner = async () => {
      try {
        const Token = localStorage.getItem("token") || sessionStorage.getItem("token");
        let userData = {};

        if (Token) {
          userData = jwtDecode(Token);
        } else {
          const registeredEmail = localStorage.getItem("registeredEmail");
          if (registeredEmail) {
            userData.email = registeredEmail;
          }
        }

        if (!userData.id && !userData.email) return;

        const response = await axios.get("http://localhost:4000/api/business/find-owner", {
          params: { id: userData.id, email: userData.email },
        });

        if (response.data && response.data.businessOwnerId) {
          setFormData((prevData) => ({
            ...prevData,
            businessOwnerId: response.data.businessOwnerId,
          }));

          console.log("‚úÖ Business Owner Found:", response.data);
        }
      } catch (error) {
        console.error("üö® Error fetching BusinessOwner:", error);
      }
    };

    fetchBusinessOwner();
  }, []);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ Backend
  const handleImageUpload = async (event) => {
    const files = Array.from(event.target.files);
    if (images.length + files.length > 4) {
      setErrorMessage("‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 4 ‡∏£‡∏π‡∏õ");
      return;
    }
    setErrorMessage("");

    const uploadedImages = [];
    for (const file of files) {
      const formData = new FormData();
      formData.append("image", file);

      try {
        const response = await axios.post("http://localhost:4000/api/upload/arena", formData, {
          headers: { "Content-Type": "multipart/form-data" },
        });

        uploadedImages.push(response.data.imageUrl);
      } catch (error) {
        console.error("‚ùå Upload failed:", error);
        setErrorMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ");
      }
    }
    setImages((prevImages) => [...prevImages, ...uploadedImages]);
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
  const handleRemoveImage = (index) => {
    setImages((prevImages) => prevImages.filter((_, i) => i !== index));
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà Backend
  const handleSubmit = async () => {
    if (!validateForm()) return;
  
    const arenaData = {
      ...formData,
      location: {
        type: "Point",
        coordinates: mapLocation // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Schema
      },
      amenities: formData.amenities,
      images,
    };
  
    console.log("üì© Data to be sent:", arenaData);
  
    try {
      const response = await axios.post("http://localhost:4000/api/arenas/register", arenaData);
      alert("‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      resetForm();
    } catch (error) {
      console.error("‚ùå Register Arena Failed:", error);
      setFormErrors("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
  const validateForm = () => {
    const { fieldName, ownerName, phone, startTime, endTime, location, businessOwnerId } = formData;

    if (!fieldName || !ownerName || !phone || !startTime || !endTime || !location || !businessOwnerId || images.length < 1) {
      setFormErrors("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return false;
    }
    setFormErrors("");
    return true;
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Reset ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Submit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  const resetForm = () => {
    setFormData({
      fieldName: "",
      ownerName: "",
      phone: "",
      startTime: "",  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å workingHours ‡πÄ‡∏õ‡πá‡∏ô startTime & endTime
      endTime: "",
      location: DEFAULT_LOCATION,
      businessOwnerId: "",
      additionalInfo: "",
      amenities: []
    });
    setImages([]);
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å input
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å checkbox
  const handleCheckboxChange = (e) => {
    const { id, checked } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      amenities: checked
        ? [...(prevData.amenities || []), id]  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ array
        : (prevData.amenities || []).filter(item => item !== id) // ‚úÖ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array
    }));
  };


  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  const handleTextAreaChange = (e) => {
    const { value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      additionalInfo: value
    }));
  };

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    useEffect(() => {
      setFormData((prevData) => ({
        ...prevData,
        location: {
          type: "Point",
          coordinates: mapLocation // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Schema
        },
      }));
    }, [mapLocation]);
    

      // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤
  const handleTimeChange = (time, type) => {
    setFormData((prevData) => ({
      ...prevData,
      [type]: time || "", // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "" ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô undefined
    }));
  };

  return (
    <div className="form-container099">
      {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ */}
      <div className="form-header099">
        <div className="header099">
          <img src={logo} alt="MatchWeb Logo" className="logo099" />
          <h1>MatchWeb</h1>
          <p>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£</p>
        </div>
      </div>

      <div className="form-content099">
        {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
        <div className="form-section099 image-section099">
          <div className="image-upload099">
            {images.length < 4 ? (
              <label htmlFor="imageInput">
                <span>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ {images.length}/4</span>
              </label>
            ) : (
              <span className="complete-message">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>
            )}
            <input
              type="file"
              id="imageInput"
              accept="image/*"
              multiple
              onChange={handleImageUpload}
              style={{ display: "none" }}
            />
          </div>

          {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
          <div className="uploaded-images099">
            {images.map((image, index) => (
              <div key={index} className="uploaded-image-container099">
                <img src={image} alt={`Uploaded ${index}`} className="uploaded-image099" />
                <button className="remove-image-button099" onClick={() => handleRemoveImage(index)}>‚úñ</button>
              </div>
            ))}
          </div>
          {errorMessage && <p className="error-message099">{errorMessage}</p>}
        </div>

        {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏° */}
        <div className="form-section099 field-section099">
          <label>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏° : *</label>
          <input type="text" name="fieldName" value={formData.fieldName} onChange={handleInputChange} placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°" />

          <label>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á : *</label>
          <input type="text" name="ownerName" value={formData.ownerName} onChange={handleInputChange} placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á" />

          <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå : *</label>
          <input type="tel" name="phone" value={formData.phone} onChange={handleInputChange} placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" />

          <label>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î:</label>
          <div style={{ display: "flex", gap: "10px", alignItems: "center" }}>
            {/* ‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Start Time) */}
            <TimePicker
              onChange={(time) => setFormData({ ...formData, startTime: time })} // ‚úÖ ‡πÉ‡∏ä‡πâ startTime
              value={formData.startTime}
              disableClock={true}
              format="H:mm"
              clearIcon={null}
              className="react-time-picker"
            />
            <span>-</span>
            {/* ‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (End Time) */}
            <TimePicker
              onChange={(time) => setFormData({ ...formData, endTime: time })} // ‚úÖ ‡πÉ‡∏ä‡πâ endTime ‡πÅ‡∏ó‡∏ô
              value={formData.endTime}
              disableClock={true}
              format="H:mm"
              clearIcon={null}
              className="react-time-picker"
            />
          </div>


          <label>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á:
            <span style={{ marginLeft: "10px", fontWeight: "bold", color: "#007bff" }}>
              üìç {mapLocation[0].toFixed(5)}, {mapLocation[1].toFixed(5)}
            </span>
          </label>
          <Mapping location={mapLocation || DEFAULT_LOCATION} setLocation={setMapLocation} />
        </div>

        {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å + ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°) */}
        <div className="form-section099 additional-section099">
          <label>‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å:</label>
          <div className="checkbox-group099">
            {["parking", "wifi", "locker", "shower", "rent", "shop", "other"].map((amenity) => (
              <div key={amenity}>
                <input
                  type="checkbox"
                  id={amenity}
                  checked={(formData.amenities || []).includes(amenity)} // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô undefined error
                  onChange={handleCheckboxChange}
                />
                <label htmlFor={amenity}>{getAmenityLabel(amenity)}</label>
              </div>
            ))}
          </div>
          <label>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏° / ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á :</label>
          <textarea
            className="large-textarea099"
            value={formData.additionalInfo}
            onChange={handleTextAreaChange}
            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
          ></textarea>
        </div>
      </div>

      {/* ‚úÖ ‡∏ü‡∏∏‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏° */}
      <div className="form-footer099">
        {formErrors && <p className="error-message">{formErrors}</p>}
        <button onClick={handleSubmit}>‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠</button>
      </div>
    </div>
  );

};

export default MatchWebForm;
