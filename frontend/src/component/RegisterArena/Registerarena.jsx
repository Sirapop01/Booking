import React, { useState, useEffect } from "react";
import axios from "axios";
import "./Registerarena.css";
import logo from '../assets/logo.png';
import { jwtDecode } from "jwt-decode";
import Mapping from "../Mapping/Mapping"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Mapping
import TimePicker from "react-time-picker"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Time Picker
import "react-time-picker/dist/TimePicker.css"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ CSS
import "react-clock/dist/Clock.css"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Clock UI
import { useNavigate } from "react-router-dom";
import { useParams } from "react-router-dom"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
import Swal from "sweetalert2";
import background from "../assets/Blackground/Yahoo.png";

const DEFAULT_LOCATION = [13.736717, 100.523186]; // ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø)


const MatchWebForm = () => {
  const [images, setImages] = useState([]);
  const [errorMessage, setErrorMessage] = useState('');
  const [formErrors, setFormErrors] = useState('');
  const [mapLocation, setMapLocation] = useState(DEFAULT_LOCATION);
  const navigate = useNavigate();
  const { arenaId } = useParams();
  console.log("üßê Retrieved arenaId from useParams():", arenaId);

  const [formData, setFormData] = useState({
    fieldName: '',
    ownerName: '',
    phone: '',
    startTime: '',
    endTime: '',
    location: DEFAULT_LOCATION,
    businessOwnerId: '',
    additionalInfo: '',
    amenities: [],
  });

  const getAmenityLabel = (key) => {
    const labels = {
      ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ: '‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ',
      WiFi: 'WiFi',
      ‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå: '‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå',
      ‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥: '‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥',
      ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏ä‡πà‡∏≤: '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏ä‡πà‡∏≤',
      ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
      ‡∏≠‡∏∑‡πà‡∏ô‡πÜ: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
    };
    return labels[key] || key;
  };

  useEffect(() => {
    console.log("üî• useEffect Triggered! arenaId:", arenaId);

    const fetchData = async () => {
      try {
        const Token = localStorage.getItem('token') || sessionStorage.getItem('token');
        let userData = {};

        if (Token) {
          userData = jwtDecode(Token);
        } else {
          const registeredEmail = localStorage.getItem('registeredEmail');
          if (registeredEmail) {
            userData.email = registeredEmail;
          }
        }

        if (!userData.id && !userData.email) return;

        // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Business Owner
        const businessOwnerResponse = await axios.get('http://localhost:4000/api/business/find-owner', {
          params: { id: userData.id, email: userData.email },
        });

        let ownerId = businessOwnerResponse.data?.businessOwnerId || "";
        console.log("üìå Fetched businessOwnerId:", ownerId);

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ arenaId ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á businessOwnerId ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà)
        if (!arenaId) {
          setFormData((prevData) => ({
            ...prevData,
            businessOwnerId: ownerId,
          }));
          return;
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ arenaId ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°
        const arenaResponse = await axios.get(`http://localhost:4000/api/arena-manage/getArenaById/${arenaId}`);

        if (arenaResponse.data) {
          const arena = arenaResponse.data;
          let arenaCoordinates = arena.location?.coordinates || DEFAULT_LOCATION;

          if (!Array.isArray(arenaCoordinates) || arenaCoordinates.length !== 2) {
            console.error("‚ùå ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", arenaCoordinates);
            arenaCoordinates = DEFAULT_LOCATION;
          }

          console.log("üìç Loaded Arena Coordinates:", arenaCoordinates); // ‚úÖ Debugging
          setFormData((prevData) => ({
            ...prevData,
            fieldName: arena.fieldName || '',
            ownerName: arena.ownerName || '',
            phone: arena.phone || '',
            startTime: arena.startTime || '',
            endTime: arena.endTime || '',
            location: arena.location?.coordinates || DEFAULT_LOCATION,
            businessOwnerId: arena.businessOwnerId || ownerId, // ‚úÖ ‡πÉ‡∏ä‡πâ ownerId ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
            additionalInfo: arena.additionalInfo || '',
            amenities: arena.amenities || [],
          }));
          setMapLocation([arenaCoordinates[1], arenaCoordinates[0]]); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
        }

      } catch (error) {
        console.error('üö® Error fetching data:', error);
      }
    };

    fetchData();
  }, [arenaId]); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ arenaId ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô




  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå -> ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡πÉ‡∏ô state
  const handleImageUpload = (event) => {
    const files = Array.from(event.target.files);
    if (images.length + files.length > 4) {
      setErrorMessage('‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 4 ‡∏£‡∏π‡∏õ');
      return;
    }
    setErrorMessage('');
    setImages((prevImages) => [...prevImages, ...files]);
  };

  const handleRemoveImage = (index) => {
    setImages((prevImages) => prevImages.filter((_, i) => i !== index));
  };

  const fetchArenaData = async () => {
    try {
      console.log("üîÑ Fetching arena data...");
      const response = await axios.get(`http://localhost:4000/api/arena-manage/getArenaById/${arenaId}`);

      if (response.data) {
        console.log("üì¢ Fetching Arena Data:", response.data);
        setFormData({
          fieldName: response.data.fieldName || '',
          ownerName: response.data.ownerName || '',
          phone: response.data.phone || '',
          startTime: response.data.startTime || '',
          endTime: response.data.endTime || '',
          location: response.data.location?.coordinates || DEFAULT_LOCATION,
          businessOwnerId: response.data.businessOwnerId || '',
          additionalInfo: response.data.additionalInfo || '',
          amenities: response.data.amenities || [],
        });

        setMapLocation(response.data.location?.coordinates || DEFAULT_LOCATION);
        setImages(response.data.images || []);
      }
    } catch (error) {
      console.error("‚ùå Error fetching updated data:", error);
    }
  };



  const handleSubmit = async () => {
    if (!validateForm()) return;

    Swal.fire({
      title: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...",
      text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà",
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      },
    });

    console.log("üì§ Form Data before submit:", formData);

    const submitFormData = new FormData();
    submitFormData.append("fieldName", formData.fieldName);
    submitFormData.append("ownerName", formData.ownerName);
    submitFormData.append("phone", formData.phone);
    submitFormData.append("startTime", formData.startTime);
    submitFormData.append("endTime", formData.endTime);
    submitFormData.append("businessOwnerId", formData.businessOwnerId);

    let formattedLocation = JSON.stringify({
      type: "Point",
      coordinates: [parseFloat(mapLocation[1]), parseFloat(mapLocation[0])],
    });

    submitFormData.append("location", formattedLocation);
    submitFormData.append("additionalInfo", formData.additionalInfo);
    submitFormData.append("amenities", JSON.stringify(formData.amenities));

    for (const file of images) {
      submitFormData.append("images", file);
    }

    try {
      let response;

      if (arenaId) {
        console.log("üõ† Updating Arena...");
        response = await axios.put(`http://localhost:4000/api/arena-manage/updateArena/${arenaId}`, submitFormData, {
          headers: { "Content-Type": "multipart/form-data" },
        });

        console.log("‚úÖ Arena Updated:", response.data);

        // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Alert ‡∏™‡∏ß‡∏¢‡πÜ ‡πÅ‡∏•‡πâ‡∏ß Reload ‡∏´‡∏ô‡πâ‡∏≤
        Swal.fire({
          title: "üéâ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
          text: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
          icon: "success",
          confirmButtonColor: "#3085d6",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        }).then(() => {
          window.location.reload(); // ‚úÖ ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
        });

      } else {
        console.log("‚ûï Creating New Arena...");
        response = await axios.post("http://localhost:4000/api/arenas/registerArena", submitFormData, {
          headers: { "Content-Type": "multipart/form-data" },
        });

        console.log("‚úÖ Arena Created:", response.data);

        // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Alert ‡∏™‡∏ß‡∏¢‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Information
        Swal.fire({
        title: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        text: "‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        icon: "success",
        confirmButtonColor: "#3085d6",
        confirmButtonText: "‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      }).then(() => {
        navigate(`/Information?arenaId=${response.data.arena._id}`); // ‚úÖ ‡∏™‡πà‡∏á arenaId ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Information
      });
     }
      
    } catch (error) {
      console.error("‚ùå Register Arena Failed:", error);

      // ‚úÖ Alert ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      Swal.fire({
        title: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        icon: "error",
        confirmButtonColor: "#d33",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
      setFormErrors("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };




  useEffect(() => {
    if (arenaId) {
      console.log("üü¢ Fetching arena data in useEffect...");
      fetchArenaData();
    }
  }, [arenaId]); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ `arenaId` ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

  const validateForm = () => {
    const { fieldName, ownerName, phone, startTime, endTime, location, businessOwnerId } = formData;
    if (!fieldName || !ownerName || !phone || !startTime || !endTime || !location || !businessOwnerId || images.length < 1) {
      setFormErrors('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return false;
    }
    setFormErrors('');
    return true;
  };

  const resetForm = () => {
    setFormData({
      fieldName: formData.fieldName || '',
      ownerName: formData.ownerName || '',
      phone: formData.phone || '',
      startTime: formData.startTime || '',
      endTime: formData.endTime || '',
      location: formData.location || DEFAULT_LOCATION,
      businessOwnerId: formData.businessOwnerId || '',
      additionalInfo: formData.additionalInfo || '',
      amenities: formData.amenities || [],
    });
    setImages([]);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleCheckboxChange = (e) => {
    const { id, checked } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      amenities: checked ? [...prevData.amenities, id] : prevData.amenities.filter((item) => item !== id),
    }));
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  const handleTextAreaChange = (e) => {
    const { value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      additionalInfo: value
    }));
  };

  useEffect(() => {
    setFormData((prevData) => ({
      ...prevData,
      location: {
        type: 'Point',
        coordinates: mapLocation,
      },
    }));
  }, [mapLocation]);

  return (
    <>
      {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ */}
      <div className="form-header099">
        <div className="header099">
          <img src={logo} alt="MatchWeb Logo" className="logo099" />
          <h1 className="header-title">{arenaId ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ô‡∏≤‡∏°" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£"}</h1>
        </div>
      </div>

      {/* ‚úÖ ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° */}
      <div className="containerRe" style={{ backgroundImage: `url(${background})` }}>
        <div className="form-container099">
          <div className="form-content099">
            {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
            <div className="form-section099 image-section099">
              <div className="image-upload099">
                {images.length < 4 ? (
                  <label htmlFor="imageInput">
                    <span>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ {images.length}/4</span>
                  </label>
                ) : (
                  <span className="complete-message">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>
                )}
                <input
                  type="file"
                  id="imageInput"
                  accept="image/*"
                  multiple
                  onChange={handleImageUpload}
                  style={{ display: "none" }}
                />
              </div>

              {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
              <div className="uploaded-images099">
                {images.map((image, index) => (
                  <div key={index} className="uploaded-image-container099">
                    <img
                      src={typeof image === "string" ? image : URL.createObjectURL(image)}
                      alt={`Uploaded ${index}`}
                      className="uploaded-image099"
                    />
                    <button className="remove-image-button099" onClick={() => handleRemoveImage(index)}>
                      ‚úñ
                    </button>
                  </div>
                ))}
              </div>
              {errorMessage && <p className="error-message099">{errorMessage}</p>}
            </div>

            {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏° */}
            <div className="form-section099 field-section099">
              <label>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏° : *</label>
              <input
                type="text"
                name="fieldName"
                value={formData.fieldName}
                onChange={handleInputChange}
                placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°"
              />

              <label>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á : *</label>
              <input
                type="text"
                name="ownerName"
                value={formData.ownerName}
                onChange={handleInputChange}
                placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á"
              />

              <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå : *</label>
              <input
                type="tel"
                name="phone"
                value={formData.phone}
                inputMode="numeric"
                maxLength="10"
                onChange={handleInputChange}
                placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
              />

              <label>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î:</label>
              <div style={{ display: "flex", gap: "10px", alignItems: "center" }}>
                {/* ‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Start Time) */}
                <input
                  type="time"
                  value={formData.startTime}
                  onChange={(e) => setFormData((prev) => ({ ...prev, startTime: e.target.value }))}
                  className="time-input"
                />
                <span>-</span>
                {/* ‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (End Time) */}
                <input
                  type="time"
                  value={formData.endTime}
                  onChange={(e) => setFormData((prev) => ({ ...prev, endTime: e.target.value }))}
                  className="time-input"
                />
              </div>

              <label>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á:</label>
              <span style={{ marginLeft: "10px", fontWeight: "bold", color: "#007bff" }}>
                üìç {mapLocation[0]?.toFixed(5)}, {mapLocation[1]?.toFixed(5)}
              </span>
              <Mapping location={mapLocation || DEFAULT_LOCATION} setLocation={setMapLocation} />
            </div>

            {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å + ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°) */}
            <div className="form-section099 additional-section099">
              <label>‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å:</label>
              <div className="checkbox-group099">
                {["parking", "wifi", "locker", "shower", "rent", "shop", "other"].map((amenity) => (
                  <div key={amenity}>
                    <input
                      type="checkbox"
                      id={amenity}
                      checked={formData.amenities ? formData.amenities.includes(amenity) : false}
                      onChange={handleCheckboxChange}
                    />
                    <label htmlFor={amenity}>{getAmenityLabel(amenity)}</label>
                  </div>
                ))}
              </div>

              <label>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏° / ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á :</label>
              <textarea
                className="large-textarea099"
                value={formData.additionalInfo}
                onChange={handleTextAreaChange}
                placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
              ></textarea>
            </div>
          </div>

          {/* ‚úÖ ‡∏ü‡∏∏‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏° */}
          <div className="form-footer099">
            {formErrors && <p className="error-message">{formErrors}</p>}
            <button onClick={handleSubmit}>
              {arenaId ? "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" : "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠"}
            </button>
          </div>
        </div>
      </div>
    </>
  );



};

export default MatchWebForm;
