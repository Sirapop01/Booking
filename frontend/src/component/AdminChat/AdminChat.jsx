import React, { useState, useEffect, useRef, useCallback } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { jwtDecode } from "jwt-decode";
import "./AdminChat.css";
import homeLogo from "../assets/logoalt.png";
import sendIcon from "../assets/icons/send.png";
import { io } from "socket.io-client"; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Socket.io

const AdminChat = () => {
  const [users, setUsers] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const chatEndRef = useRef(null);
  const navigate = useNavigate();

  // ‚úÖ Toggle ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Customers ‡πÅ‡∏•‡∏∞ Owners
  const [activeCategory, setActiveCategory] = useState("customer");

  const getToken = () => {
    const token = localStorage.getItem("token") || sessionStorage.getItem("token");
    return token ? `Bearer ${token}` : null;
  };

  const token = getToken();
  const decoded = token ? jwtDecode(token) : null;
  const adminId = decoded?.id;

  useEffect(() => {
    if (!token || !decoded) {
      console.warn("‚ùå No token found! Redirecting to login...");
      navigate("/login");
    }
  }, [token, decoded, navigate]);
  
  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ä‡∏ó
  useEffect(() => {
    if (!token) return;

    setLoading(true);
    console.log("üì° Fetching all chat users with token:", token);

    axios
      .get("http://localhost:4000/api/chat/chat-users", {
        headers: { Authorization: token },
      })
      .then((response) => {
        console.log("‚úÖ Users received from API:", response.data.data);

        if (!Array.isArray(response.data.data)) {
          throw new Error("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `user.role` ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ `map()`
        response.data.data.forEach(user => {
          console.log("üîç Checking user:", user);
        });

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ name ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const processedUsers = response.data.data.map(user => ({
          ...user,
          name: user.name || user.businessName || user.email || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠"
        }));

        console.log("‚úÖ Processed Users:", processedUsers);

        setUsers(processedUsers);

        if (processedUsers.length > 0 && processedUsers[0]._id) {
          setSelectedUser(processedUsers[0]);
        } else {
          setSelectedUser(null);
        }
      })
      .catch((error) => {
        console.error("‚ùå Error fetching users:", error.response ? error.response.data : error.message);
        setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
      })
      .finally(() => setLoading(false));

}, [token]);


  // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á Users ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

    const filteredUsers = users.filter((user) => {
      if (activeCategory === "customer") return user.role === "customer";
      if (activeCategory === "owner") return user.role === "owner"; // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô "owner"
      return false;
    });     
  console.log("üì¢ Filtering Users for:", activeCategory);
  console.log("‚úÖ Filtered Users:", filteredUsers);


  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
const fetchMessages = useCallback(() => {
  if (!selectedUser || !selectedUser._id || !token) {
    console.warn("‚ö†Ô∏è fetchMessages skipped due to missing parameters", {
      selectedUser,
      token
    });
    return;
  }

  console.log("üì° Fetching chat history for:", {
    userId: selectedUser._id,
    userModel: selectedUser.role === "customer" ? "User" : "BusinessOwner" // ‡πÉ‡∏ä‡πâ BusinessOwner ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Owner
  });

  axios.get(`http://localhost:4000/api/chat/history/${selectedUser._id}/${selectedUser.role === "customer" ? "User" : "BusinessOwner"}`, {
    headers: { Authorization: token }
  })
  .then((response) => {
    console.log("‚úÖ Chat history received:", response.data);
    setMessages(response.data.data || []);
  })
  .catch((error) => {
    console.error("‚ùå Error fetching chat history:", error);
  });
}, [selectedUser, token]);

// ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Socket.io
useEffect(() => {
  const socket = io("http://localhost:4000"); // ‡πÉ‡∏ä‡πâ URL ‡∏Ç‡∏≠‡∏á server ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  socket.on("receiveMessage", (newMessage) => {
    console.log("üì° New message received:", newMessage);
    setMessages((prevMessages) => [...prevMessages, newMessage]); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô messages
  });

  // Cleanup function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö socket ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
  return () => {
    socket.disconnect();
  };
}, []); // ‡πÉ‡∏ä‡πâ [] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÇ‡∏´‡∏•‡∏î

// ‚úÖ Scroll ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
useEffect(() => {
  console.log("Updated Messages:", messages); // ‡πÄ‡∏û‡∏¥‡πà‡∏° console.log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á messages
  chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
}, [messages]);

  

  // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const sendMessageToUserOrOwner = () => {
    if (!newMessage.trim() || !selectedUser || !decoded?.id) {
      console.error("‚ùå Missing required fields for sending message:", {
        newMessage,
        selectedUser,
        senderId: decoded?.id,
      });
      return;
    }
  
    console.log("üì° Sending message:", {
      userId: selectedUser?._id,
      content: newMessage,
    });
  
    const payload = {
      senderId: decoded.id,
      senderModel: "Admin",
      senderRole: "admin",
      receiverId: selectedUser?._id, // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°
      receiverModel: selectedUser.role === "customer" ? "User" : "BusinessOwner",
      receiverRole: selectedUser.role,
      message: newMessage,
    };
  
    axios
      .post("http://localhost:4000/api/chat/sendMessageToUserOrOwner", payload, {
        headers: { Authorization: token },
      })
      .then((response) => {
        console.log("‚úÖ Message sent successfully:", response.data);
        setMessages((prevMessages) => [...prevMessages, response.data.data]);
        setNewMessage("");
      })
      .catch((error) => {
        console.error("‚ùå Error sending message:", error.response ? error.response.data : error.message);
        setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà!");
      });
  };
  

  useEffect(() => {
    if (selectedUser) {
      fetchMessages();
    }
  }, [selectedUser, fetchMessages]);
  

  return (
    <div className="admin-chat-container">
      <a href="/" className="home-button">
        <img src={homeLogo} alt="Home Logo" className="home-logo" />
      </a>

      <h1 className="page-title2">‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠</h1>

      {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Toggle ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ / ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏° */}
        <div className="category-toggle">
          <button
            className={activeCategory === "customer" ? "active" : ""}
            onClick={() => {
              console.log("üì¢ Switching to Customers");
              setActiveCategory("customer");
            }}
          >
            ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (Customers)
          </button>
          <button
            className={activeCategory === "owner" ? "active" : ""}
            onClick={() => {
              console.log("üì¢ Switching to Owners");
              setActiveCategory("owner");
            }}
          >
            ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏° (Owners)
          </button>
        </div>

      <div className="chat-content">
        <div className="user-list-container2">
          <div className="user-list2">
            <div className="list-header2">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</div>
            {filteredUsers.map((user) => (
              <div
                key={user._id}
                className={`user-item2 ${selectedUser?._id === user._id ? "selected" : ""}`}
                onClick={() => setSelectedUser(user)}
              >
                {user.name || user.email || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠"} {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ name */}
              </div>
            ))}
          </div>
        </div>

        <div className="chat-box-container2">
          <div className="chat-box">
            <div className="chat-header">
              {selectedUser ? `‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö ${selectedUser.name || selectedUser.email}` : "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}
            </div>
            <div className="chat-messages">
              {messages.length > 0
                ? messages.map((msg, index) => (
                    <div key={index} className={`chat-message ${msg.senderRole === "admin" ? "admin-message" : "user-message"}`}>
                      <span>{msg.message}</span>
                    </div>
                  ))
                : <div className="no-messages">üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</div>}
            </div>
          </div>

          <div className="message-input">
            <input type="text" placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..." value={newMessage} onChange={(e) => setNewMessage(e.target.value)} onKeyDown={(e) => e.key === "Enter" && sendMessageToUserOrOwner()} disabled={!selectedUser} />
            <button onClick={sendMessageToUserOrOwner} disabled={!selectedUser}>
              <img src={sendIcon} alt="Send" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminChat;
