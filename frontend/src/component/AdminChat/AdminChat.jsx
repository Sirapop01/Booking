import React, { useState, useEffect, useRef, useCallback } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { jwtDecode } from "jwt-decode";
import "./AdminChat.css";
import homeLogo from "../assets/logoalt.png";
import sendIcon from "../assets/icons/send.png";
import { io } from "socket.io-client"; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Socket.io

const AdminChat = () => {
  const [users, setUsers] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const chatEndRef = useRef(null);
  const navigate = useNavigate();

  // ‚úÖ Toggle ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Customers ‡πÅ‡∏•‡∏∞ Owners
  const [activeCategory, setActiveCategory] = useState("customer");

  const getToken = () => {
    const token = localStorage.getItem("token") || sessionStorage.getItem("token");
    return token ? `Bearer ${token}` : null;
  };

  const token = getToken();
  const decoded = token ? jwtDecode(token) : null;
  const adminId = decoded?.id;
  const [newMessages, setNewMessages] = useState({});


  useEffect(() => {
    if (!token || !decoded) {
      console.warn("‚ùå No token found! Redirecting to login...");
      navigate("/login");
    }
  }, [token, decoded, navigate]);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ä‡∏ó
  useEffect(() => {
    if (!token) return;
  
    const fetchUserList = () => {
      console.log("üì° Fetching chat users...");
      axios
        .get("http://localhost:4000/api/chat/chat-users", {
          headers: { Authorization: token },
        })
        .then((response) => {
          console.log("‚úÖ Users list updated:", response.data.data);
  
          if (!Array.isArray(response.data.data)) {
            throw new Error("‚ö†Ô∏è API response format incorrect");
          }
  
          const processedUsers = response.data.data.map(user => ({
            ...user,
            name: user.name || user.businessName || user.email || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠",
          }));
  
          setUsers(processedUsers);
  
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
          if (!selectedUser || !processedUsers.some(u => u._id === selectedUser?._id)) {
            setSelectedUser(processedUsers[0] || null);
          }
        })
        .catch((error) => {
          console.error("‚ùå Error loading users:", error.response ? error.response.data : error.message);
        });
    };
  
    fetchUserList(); // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    const userInterval = setInterval(fetchUserList, 5000); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  
    return () => clearInterval(userInterval); // ‡∏•‡πâ‡∏≤‡∏á interval ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
  }, [token, selectedUser]);
  

  // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á Users ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const filteredUsers = users.filter((user) => {
    if (activeCategory === "customer") return user.role === "customer";
    if (activeCategory === "owner") return user.role === "owner"; // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô "owner"
    return false;
  });
  console.log("üì¢ Filtering Users for:", activeCategory);
  console.log("‚úÖ Filtered Users:", filteredUsers);

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const fetchMessages = useCallback(() => {
    if (!selectedUser || !selectedUser._id || !token) {
      console.warn("‚ö†Ô∏è fetchMessages skipped due to missing parameters", {
        selectedUser,
        token
      });
      return;
    }

    console.log("üì° Fetching chat history for:", {
      userId: selectedUser._id,
      userModel: selectedUser.role === "customer" ? "User" : "BusinessOwner" // ‡πÉ‡∏ä‡πâ BusinessOwner ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Owner
    });

    axios.get(`http://localhost:4000/api/chat/history/${selectedUser._id}/${selectedUser.role === "customer" ? "User" : "BusinessOwner"}`, {
      headers: { Authorization: token }
    })
    .then((response) => {
      console.log("‚úÖ Chat history received:", response.data);
      setMessages(response.data.data || []);
    })
    .catch((error) => {
      console.error("‚ùå Error fetching chat history:", error);
    });
  }, [selectedUser, token]);

  // ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Socket.io
  useEffect(() => {
    const socket = io("http://localhost:4000"); // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå WebSocket
  
    socket.on("receiveMessage", (newMessage) => {
      console.log("üì© New message received:", newMessage);
  
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å User ‡∏à‡∏£‡∏¥‡∏á ‡πÜ
      const senderId = newMessage.senderId || newMessage.userId; 
  
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á senderId ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      if (selectedUser && selectedUser._id === senderId) {
        return;
      }
  
      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ userId ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
      setNewMessages((prev) => ({
        ...prev,
        [senderId]: true, // ‡πÄ‡∏û‡∏¥‡πà‡∏° userId ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
      }));
    });
  
    return () => {
      socket.off("receiveMessage"); // Cleanup WebSocket ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
    };
  }, [selectedUser]);
  

  // ‚úÖ Scroll ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  useEffect(() => {
    console.log("Updated Messages:", messages); // ‡πÄ‡∏û‡∏¥‡πà‡∏° console.log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á messages
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]); // ‡πÉ‡∏ä‡πâ messages ‡πÄ‡∏õ‡πá‡∏ô dependency

  // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const sendMessageToUserOrOwner = () => {
    if (!newMessage.trim() || !selectedUser || !decoded?.id) {
      console.error("‚ùå Missing required fields for sending message:", {
        newMessage,
        selectedUser,
        senderId: decoded?.id,
      });
      return;
    }

    console.log("üì° Sending message:", {
      userId: selectedUser?._id,
      content: newMessage,
    });

    const payload = {
      senderId: decoded.id,
      senderModel: "Admin",
      senderRole: "admin",
      receiverId: selectedUser?._id, // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°
      receiverModel: selectedUser.role === "customer" ? "User" : "BusinessOwner",
      receiverRole: selectedUser.role,
      message: newMessage,
    };

    axios
      .post("http://localhost:4000/api/chat/sendMessageToUserOrOwner", payload, {
        headers: { Authorization: token },
      })
      .then((response) => {
        console.log("‚úÖ Message sent successfully:", response.data);
        setMessages((prevMessages) => [...prevMessages, response.data.data]);
        setNewMessage("");
      })
      .catch((error) => {
        console.error("‚ùå Error sending message:", error.response ? error.response.data : error.message);
        setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà!");
      });
  };

  useEffect(() => {
    if (!selectedUser) return;

    fetchMessages();
    const interval = setInterval(fetchMessages, 5000);

    return () => clearInterval(interval);
  }, [selectedUser, fetchMessages]);
  

  return (
    <div className="admin-chat-container">
      
      <header className="admin-chat-header">
        <a href="/superadmin/dashboard" className="home-button">
          <img src={homeLogo} alt="Home Logo" className="home-logo" />
        </a>
        <h1 className="page-title2">‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠</h1>
      </header>


        

     
      <div className="chat-layout">
  {/* üîµ User List Container */}
  <div className="user-list-container2">
    
    {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Toggle ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ / ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏° */}
    <div className="category-toggle">
      <button
        className={activeCategory === "customer" ? "active" : ""}
        onClick={() => setActiveCategory("customer")}
      >
        ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      </button>
      <button
        className={activeCategory === "owner" ? "active" : ""}
        onClick={() => setActiveCategory("owner")}
      >
        ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°
      </button>
    </div>

    {/* ‚úÖ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */}
    <div className="user-list2">
      <div className="list-header2">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</div>
      {filteredUsers.map((user) => (
        <div
          key={user._id}
          className={`user-item2 ${selectedUser?._id === user._id ? "selected" : ""}`}
          onClick={() => {
            setSelectedUser(user);
            setNewMessages((prev) => ({
              ...prev,
              [user._id]: false, 
            }));
          }}
        >
          {user.name || user.email || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠"}
          {newMessages[user._id] && <span className="chat-notification-dot"></span>}
        </div>            
      ))}
    </div>
  </div>

  {/* üü† Chat Box Container */}
  <div className="chat-box-container2">
    <div className="chat-box">
      <div className="chat-header">
        {selectedUser ? `‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö ${selectedUser.name || selectedUser.email}` : "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}
      </div>
      <div className="chat-messages">
        {messages.length > 0
          ? messages.map((msg, index) => (
              <div key={index} className={`chat-message ${msg.senderRole === "admin" ? "admin-message" : "user-message"}`}>
                <span>{msg.message}</span>
              </div>
            ))
          : <div className="no-messages">üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</div>}
      </div>
    </div>

    <div className="message-input">
      <input 
        type="text" 
        placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..." 
        value={newMessage} 
        onChange={(e) => setNewMessage(e.target.value)} 
        onKeyDown={(e) => e.key === "Enter" && sendMessageToUserOrOwner()} 
        disabled={!selectedUser} 
      />
      <button onClick={sendMessageToUserOrOwner} disabled={!selectedUser}>
        <img src={sendIcon} alt="Send" />
      </button>
    </div>
  </div>
</div>
</div>

    
  );
};

export default AdminChat;
