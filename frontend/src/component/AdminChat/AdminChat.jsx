import React, { useState, useEffect, useRef, useCallback } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom"; // ‚úÖ ‡πÉ‡∏ä‡πâ Navigate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Redirect
import "./AdminChat.css";
import homeLogo from "../assets/logoalt.png";
import sendIcon from "../assets/icons/send.png"; // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

const AdminChat = () => {
  const [users, setUsers] = useState([]); // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const [selectedUser, setSelectedUser] = useState(null); // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [messages, setMessages] = useState([]); // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const [newMessage, setNewMessage] = useState(""); // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
  const [loading, setLoading] = useState(true); // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Loading
  const [error, setError] = useState(null); // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Error
  const chatEndRef = useRef(null); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô Scrollbar ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const navigate = useNavigate(); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Redirect

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Token ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  const getToken = () => {
    const token = localStorage.getItem("token") || sessionStorage.getItem("token");
    console.log("üîç Token from Storage:", token); // Debug
    return token ? `Bearer ${token}` : null;
  };  
  const token = getToken();

  console.log("üîç Token from Storage:", token); // ‚úÖ Debug Token

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡πÉ‡∏´‡πâ Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
  useEffect(() => {
    if (!token) {
      console.warn("‚ùå No token found! Redirecting to login...");
      navigate("/login"); 
    }
  }, [token, navigate]);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å API
  useEffect(() => {
    if (!token) return;

    setLoading(true);
    console.log("üì° Fetching users with token:", token);
    
    axios.get("http://localhost:4000/api/chat/chat-users", {
      headers: { Authorization: token },
    })
    .then((response) => {
      console.log("‚úÖ Users received:", response.data);
      setUsers(response.data);
      if (response.data.length > 0) {
        setSelectedUser(response.data[0]);
      }
    })
    .catch((error) => {
      console.error("‚ùå Error fetching users:", error.response ? error.response.data : error.message);
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
    })
    .finally(() => setLoading(false));
  }, [token]);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  const fetchMessages = useCallback(() => {
    if (!selectedUser || !token) return;

    console.log("üì° Fetching chat history for:", selectedUser?._id);
    
    axios.get(`http://localhost:4000/api/chat/chat-history/${selectedUser?._id}`, {
      headers: { Authorization: token },
    })
    .then((response) => {
      console.log("‚úÖ Chat history received:", response.data);
      setMessages(response.data);
    })
    .catch((error) => {
      console.error("‚ùå Error fetching chat history:", error.response ? error.response.data : error.message);
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ä‡∏ó");
    });
  }, [selectedUser, token]);

  useEffect(() => {
    fetchMessages();
    const interval = setInterval(fetchMessages, 3000);
    return () => clearInterval(interval);
  }, [fetchMessages]);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const sendMessage = () => {
    if (!newMessage.trim() || !selectedUser) return;

    console.log("üì° Sending message:", { userId: selectedUser?._id, content: newMessage });

    axios.post(`http://localhost:4000/api/chat/chat/${selectedUser?._id}`, 
      { sender: "admin", content: newMessage },
      { headers: { Authorization: token } }
    )
    .then((response) => {
      console.log("‚úÖ Message sent successfully:", response.data);
      setMessages((prevMessages) => [...prevMessages, response.data]);
      setNewMessage("");
    })
    .catch((error) => {
      console.error("‚ùå Error sending message:", error.response ? error.response.data : error.message);
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà!");
    });
  };

  // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô Scrollbar ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  return (
    <div className="admin-chat-container">
      <a href="/" className="home-button">
        <img src={homeLogo} alt="Home Logo" className="home-logo" />
      </a>

      <h1 className="page-title2">‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠</h1>

      <div className="chat-content">
        <div className="user-list-container2">
          <div className="user-list2">
            <div className="list-header2">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</div>
            {loading ? (
              <div className="loading">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
            ) : error ? (
              <div className="error-message">{error}</div>
            ) : users.length > 0 ? (
              users.map((user) => (
                <div
                  key={user._id}
                  className={`user-item2 ${selectedUser?._id === user._id ? "selected" : ""}`}
                  onClick={() => setSelectedUser(user)}
                >
                  {user.firstName} {user.lastName}
                </div>
              ))
            ) : (
              <div className="no-users">‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ä‡∏ó</div>
            )}
          </div>
        </div>

        <div className="chat-box-container2">
          <div className="chat-box">
            <div className="chat-header">
              {selectedUser ? `‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö ${selectedUser.firstName} ${selectedUser.lastName}` : "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}
            </div>
            <div className="chat-messages">
              {error ? (
                <div className="error-message">{error}</div>
              ) : messages.length > 0 ? (
                messages.map((msg, index) => (
                  <div key={index} className={`chat-message ${msg.sender === "admin" ? "admin-message" : "user-message"}`}>
                    <span>{msg.content}</span>
                  </div>
                ))
              ) : (
                <div className="no-messages">üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</div>
              )}
              <div ref={chatEndRef} />
            </div>

            <div className="message-input">
              <input
                type="text"
                placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                onKeyDown={(e) => e.key === "Enter" && sendMessage()}
                disabled={!selectedUser}
              />
              <button onClick={sendMessage} disabled={!selectedUser}>
                <img src={sendIcon} alt="Send" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminChat;
