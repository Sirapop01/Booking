import React, { useState, useEffect } from "react";
import axios from "axios";
import Swal from "sweetalert2"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ SweetAlert2
import "./Payment.css";
import { useNavigate } from "react-router-dom"
import { useLocation } from "react-router-dom";
const Payment = () => {
    const [paymentData, setPaymentData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [transferTime, setTransferTime] = useState("");
    const [amount, setAmount] = useState("");
    const [slipImage, setSlipImage] = useState(null);
    const navigate = useNavigate();
    const location = useLocation();
    const bookingData = location.state?.bookingData || null;
    const [timeLeft, setTimeLeft] = useState(300); // ‚úÖ ‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 3 ‡∏ô‡∏≤‡∏ó‡∏µ

    useEffect(() => {
        const fetchPaymentDetails = async () => {
            try {
                const token = localStorage.getItem("token") || sessionStorage.getItem("token");

                console.log("üìå Token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏°‡∏≤:", token);
                if (!token) {
                    console.log("‚ùå No token found in storage");
                    return;
                }

                let sessionId = bookingData?.sessionId;
                console.log("üìå sessionId ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ Backend:", sessionId);

                const response = await axios.get(
                    `http://localhost:4000/api/payments/pending?sessionId=${sessionId}`,
                    { headers: { Authorization: `Bearer ${token}` } }
                );

                console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API:", response.data);
                setPaymentData(response.data);

            } catch (error) {
                console.error("‚ùå Error fetching payment details:", error);
                if (error.response) {
                    console.error("‚ùå API Response Status:", error.response.status);
                    console.error("‚ùå API Response Data:", error.response.data);
                }
            } finally {
                setLoading(false);
            }
        };

        fetchPaymentDetails();
    }, [bookingData]);

    useEffect(() => {
        if (timeLeft <= 0) {
            Swal.fire({
                icon: "error",
                title: "‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô!",
                text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏°",
                confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
            }).then(() => {
                navigate("/"); // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏°
            });
        }

        const timer = setInterval(() => {
            setTimeLeft((prevTime) => (prevTime > 0 ? prevTime - 1 : 0));
        }, 1000);

        return () => clearInterval(timer);
    }, [timeLeft, navigate]);

    const cancelBooking = async (sessionId) => {
        try {
            const token = localStorage.getItem("token") || sessionStorage.getItem("token");
            if (!token) {
                Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô!", "error");
                return;
            }

            const result = await Swal.fire({
                title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å?",
                text: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏¢!",
                cancelButtonText: "‡πÑ‡∏°‡πà"
            });

            if (!result.isConfirmed) return;

            console.log("üîπ Sending sessionId:", sessionId); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á

            const response = await axios.put(
                "http://localhost:4000/api/payments/cancel-booking",
                { sessionId },  // ‚úÖ ‡∏™‡πà‡∏á sessionId ‡πÑ‡∏õ backend
                { headers: { Authorization: `Bearer ${token}` } }
            );

            console.log("‚úÖ Response from server:", response.data); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà backend ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö

            Swal.fire("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß", "success");
            navigate("/");
        } catch (error) {
            console.error("‚ùå Error canceling booking:", error);
            Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ", "error");
        }
    };


    const handlePaymentSubmit = async () => {
        if (timeLeft <= 0) {
            Swal.fire({
                icon: "error",
                title: "‚ùå ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
                text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            }).then(() => {
                navigate("/BookingArena");
            });
            return;
        }

        if (!transferTime || !amount || !slipImage) {
            Swal.fire({
                icon: "warning",
                title: "‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö!",
                text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
            });
            return;
        }

        const token = localStorage.getItem("token") || sessionStorage.getItem("token");
        if (!token) {
            Swal.fire({
                icon: "error",
                title: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
                text: "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
            });
            return;
        }

        const formData = new FormData();
        formData.append("sessionId", paymentData.booking.sessionId);
        formData.append("amount", amount);
        formData.append("transferTime", transferTime);
        formData.append("slipImage", slipImage);

        try {
            const response = await axios.post("http://localhost:4000/api/payments/submit", formData, {
                headers: { Authorization: `Bearer ${token}`, "Content-Type": "multipart/form-data" },
            });

            console.log("‚úÖ Payment Success:", response.data);

            Swal.fire({
                icon: "success",
                title: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                text: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
                confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
            }).then(() => {
                navigate("/"); 
            });

        } catch (error) {
            console.error("‚ùå Payment Error:", error);
            Swal.fire({
                icon: "error",
                title: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
                text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
            });
        }
    };

    if (loading) {
        return <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;
    }

    if (!paymentData) {
        return <p>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</p>;
    }

    const { arenaInfo, booking, stadiumInfo, bankInfo } = paymentData;
    return (
        <div className="payment-container">
            <div className="payment-top">
                <div className="image-top">
                    <img src={arenaInfo?.images?.[0] || "https://via.placeholder.com/350x250"} alt="‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤" className="arena-image" />
                </div>
                <div className="info-top">
                    <div className="arena-details">
                        <h2>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á #{booking?.sessionId || "N/A"}</h2>
                        <p>üìç ‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤: {arenaInfo?.fieldName || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°"}</p>
                        <p>üìç ‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á: {bookingData?.details?.map((detail) => detail.name).join(", ") || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢"}</p>
                        <p>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</p>
                            <ul>
                            {Object.entries(
                                bookingData?.details?.reduce((acc, detail) => {
                                const stadiumName = detail.name; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô Key
                                if (!acc[stadiumName]) acc[stadiumName] = [];
                                acc[stadiumName].push(detail.bookingDate);
                                return acc;
                                }, {})
                            ).map(([stadiumName, dates], index) => (
                                <li key={index}>
                                <span>{stadiumName} :</span> {new Date(dates[0]).toLocaleDateString()}
                                </li>
                            ))}
                            </ul>
                        <p>üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á: </p>
                        <ul>
                            {bookingData?.details?.map((detail, index) => (
                                <li key={index}>
                                    {detail.name} : {detail.startTime} - {detail.endTime} ({detail.duration} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
                                </li>
                            ))}
                        </ul>
                        <p className="price">üí∞ ‡∏ø{booking?.totalPrice ?? "N/A"}</p>
                    </div>
                </div>
            </div>

            <div className="payment-bottom">
                <div className="qr-section">
                    <h3>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
                    <img src={bankInfo?.images.qrCode} alt="QR Code" className="qr-code" />
                </div>

                <div className="bank-info">
                    <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</h3>
                    <p>üè¶ ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: <strong>{bankInfo?.bank || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</strong></p>
                    <p>üí≥ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: <strong>{bankInfo?.accountNumber || "N/A"}</strong></p>
                    <p>üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: <strong>{bankInfo?.accountName || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</strong></p>
                    <p className="payment-timer">
                        ‚è≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: <strong>{Math.floor(timeLeft / 60)} ‡∏ô‡∏≤‡∏ó‡∏µ {timeLeft % 60} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</strong>
                    </p>
                </div>

                <div className="slip-upload">
                    <h3>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô</h3>
                    <label>‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</label>
                    <input type="time" value={transferTime} onChange={(e) => setTransferTime(e.target.value)} />

                    <label>üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</label>
                    <input type="number" value={amount} onChange={(e) => setAmount(e.target.value)} placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô" />

                    <label>üìé ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</label>
                    <input type="file" accept="image/*" onChange={(e) => setSlipImage(e.target.files[0])} />
                </div>
            </div>

            <div className="payment-actions">
                <button className="confirm-payment" onClick={handlePaymentSubmit} disabled={timeLeft <= 0}>
                    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
                </button>
                <button onClick={() => cancelBooking(booking.sessionId)}>
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
                </button>


            </div>
        </div>
    );

};

export default Payment;
