import React, { useState, useEffect } from "react";
import "./UserProfile.css";
import profilePic from "../assets/threeman.png";
import { FaPencilAlt } from "react-icons/fa";
import { jwtDecode } from "jwt-decode";
import axios from "axios";
import { useNavigate } from "react-router-dom";

const UserProfile = () => {
  const [isEditable, setIsEditable] = useState(false);
  const [id, setId] = useState("");
  const [member, setMember] = useState({});
  const [showLogoutModal, setShowLogoutModal] = useState(false); // ‚úÖ New state for popup modal
  const navigate = useNavigate();
  const [decodedToken, setDecodedToken] = useState(null);
  const [token, setToken] = useState("");

  useEffect(() => {
    const storedToken = localStorage.getItem("token");

    if (storedToken) {
      try {
        const decoded = jwtDecode(storedToken);
        setDecodedToken(decoded);
        setToken(storedToken);
        setId(decoded.id);
        console.log("‚úÖ Token Decoded ID:", decoded.id);
      } catch (error) {
        console.error("‚ùå Error decoding token:", error);
        setDecodedToken(null);
      }
    } else {
      console.log("‚ö† No token found in localStorage.");
    }
  }, []);

  const toggleEdit = () => {
    setIsEditable(!isEditable);
  };

  const handleChange = (e) => {
    setMember({ ...member, [e.target.name]: e.target.value });
  };

  useEffect(() => {
    if (id) {
      getMB();
    }
  }, [id]);

  const getMB = async () => {
    try {
      const res = await axios.get(`http://localhost:4000/api/auth/getinfo/${id}`);
      setMember(res.data);
      console.log("‚úÖ Member Data:", res.data);
    } catch (error) {
      console.error("‚ùå Error fetching member data:", error);
    }
  };

  const toggleLogout = () => {
    setShowLogoutModal(true); // ‚úÖ Open the modal
  };

  const confirmLogout = async () => {
    try {
      const response = await axios.get("http://localhost:4000/api/auth/logout");

      console.log("‚úÖ API Response:", response.data);

      if (response.data.message === "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô") {
        localStorage.clear();
        setMember({});
        navigate("/");
      } else {
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + response.data.message);
      }
    } catch (error) {
      console.error("‚ùå Logout Error:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö");
    } finally {
      setShowLogoutModal(false); // ‚úÖ Close the modal after action
    }
  };

  return (
    <div className="profile-container">
      {/* ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ */}
      <aside className="sidebar">
        <div className="profile-image">
          <img src={profilePic} alt="Profile" />
        </div>
        <nav>
          <button>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</button>
          <button>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î</button>
          <button>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ô‡∏≤‡∏°</button>
          <button>‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</button>
          <button>‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á</button>
        </nav>
        <button className="logout-button" onClick={toggleLogout}>‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å</button>
      </aside>

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */}
      <main className="profile-content">
        <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h2>

        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß */}
        <section className="user-info">
          <h3>
            üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß 
            <FaPencilAlt className="edit-icon" onClick={toggleEdit} />
          </h3>
          <div className="form-grid">
            <div className="input-group">
              <label>‡∏ä‡∏∑‡πà‡∏≠</label>
              <input type="text" name="firstName" value={member?.firstName || ""} onChange={handleChange} readOnly={!isEditable} />
            </div>
            <div className="input-group">
              <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
              <input type="text" name="lastName" value={member?.lastName || ""} onChange={handleChange} readOnly={!isEditable} />
            </div>
            <div className="input-group">
              <label>‡πÄ‡∏û‡∏®</label>
              <input type="text" name="gender" value={member?.gender || ""} onChange={handleChange} readOnly={!isEditable} />
            </div>
            <div className="input-group">
              <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
              <input type="text" name="phoneNumber" value={member?.phoneNumber || ""} onChange={handleChange} readOnly={!isEditable} />
            </div>
            <div className="input-group">
              <label>‡∏Å‡∏µ‡∏¨‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à</label>
              <input type="text" name="sport" value={member?.interestedSports || ""} onChange={handleChange} readOnly={!isEditable} />
            </div>
            <div className="input-group">
              <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
              <input type="email" name="email" value={member?.email || ""} readOnly />
            </div>
          </div>
        </section>

        {/* ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à */}
        <section className="location-info">
          <h3>
            üìç ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à 
            <FaPencilAlt className="edit-icon" onClick={toggleEdit} />
          </h3>
          <div className="form-grid">
            <div className="input-group">
              <label>‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á</label>
              <input type="text" name="subdistrict" value={member?.subdistrict || ""} onChange={handleChange} readOnly={!isEditable} />
            </div>
            <div className="input-group">
              <label>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</label>
              <input type="text" name="district" value={member?.district || ""} onChange={handleChange} readOnly={!isEditable} />
            </div>
            <div className="input-group">
              <label>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</label>
              <input type="text" name="province" value={member?.province || ""} onChange={handleChange} readOnly={!isEditable} />
            </div>
          </div>
        </section>

        {isEditable && <button className="save-button" onClick={toggleEdit}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>}
        <button className="forgot-password">‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ?</button>
      </main>

      {/* üîπ Logout Popup Modal */}
      {showLogoutModal && (
        <div className="modal-overlay">
          <div className="modal">
            <h2>‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å</h2>
            <p>‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà</p>
            <div className="modal-buttons">
              <button className="confirm-button" onClick={confirmLogout}>‡∏ï‡∏Å‡∏•‡∏á</button>
              <button className="cancel-button" onClick={() => setShowLogoutModal(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserProfile;
