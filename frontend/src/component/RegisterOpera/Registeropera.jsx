import React, { useState } from "react";
import { Link } from "react-router-dom";
import "./Registeropera.css";
import logo from '../assets/logo.png';
import { IoEyeSharp } from "react-icons/io5";
import { FaEyeSlash } from "react-icons/fa";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import Swal from "sweetalert2";

//Fix
const RegistrationForm = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    idCard: "",
    firstName: "",
    lastName: "",
    dob: "",
    phoneNumber: "",
    email: "",
    password: "",
    confirmPassword: "",
    acceptTerms: false,
  });

  const [errors, setErrors] = useState({});
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [otpSent, setOtpSent] = useState(false);
  const [otpSentTime, setOtpSentTime] = useState(null);

  const getCurrentDate = () => {
    const today = new Date();
    return today.toISOString().split("T")[0]; // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å
    if (name === "idCard") {
      if (/^\d{0,13}$/.test(value)) {  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å
        setFormData((prevData) => ({
          ...prevData,
          [name]: value,
        }));
      }
    } else {
      setFormData((prevData) => ({
        ...prevData,
        [name]: type === "checkbox" ? checked : value,
      }));

      setErrors((prevErrors) => ({
        ...prevErrors,
        [name]: value ? "" : prevErrors[name],
      }));
    }
  };

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  const validateIdCard = (idCard) => {
    if (idCard.length !== 13) return false;

    let sum = 0;
    for (let i = 0; i < 12; i++) {
      sum += parseInt(idCard.charAt(i)) * (13 - i);
    }

    const checkDigit = (11 - (sum % 11)) % 10;
    return checkDigit === parseInt(idCard.charAt(12));
  };


  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
  const validateForm = () => {
    let newErrors = {};
    if (!formData.idCard) newErrors.idCard = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô";
    else if (!validateIdCard(formData.idCard)) newErrors.idCard = "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";

    if (!formData.firstName) newErrors.firstName = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á";
    if (!formData.lastName) newErrors.lastName = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•";
    if (!formData.dob) newErrors.dob = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î";
    if (!formData.phoneNumber) newErrors.phoneNumber = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå";
    if (!formData.email) newErrors.email = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•";
    if (!formData.password) newErrors.password = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô";
    if (formData.password !== formData.confirmPassword) newErrors.confirmPassword = "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô";
    if (!formData.acceptTerms) newErrors.acceptTerms = "‡πÇ‡∏õ‡∏£‡∏î‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const sendOtp = async () => {
    try {
      Swal.fire({ title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á OTP...', allowOutsideClick: false, didOpen: () => Swal.showLoading() });
      await axios.post('http://localhost:4000/api/auth/send-otp', { email: formData.email });
      setOtpSent(true);
      setOtpSentTime(Date.now());
      Swal.fire('‡∏™‡πà‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•', 'success');
      return true; // ‚úÖ ‡∏™‡πà‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    } catch (error) {
      const message = error.response?.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
      Swal.fire('‡∏™‡πà‡∏á OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', message, 'error');
      return false; // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÑ‡∏õ‡∏ï‡πà‡∏≠
    }
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
  
    if (!validateForm()) return;
  
    if (!otpSent) {
      const otpSentSuccess = await sendOtp();
      if (!otpSentSuccess) return; // ‚õî ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á OTP ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    }
  
    let otpVerified = false;
    const otpExpiryTime = 5 * 60 * 1000;
  
    while (!otpVerified) {
      const currentTime = Date.now();
      const timeLeft = otpSentTime ? otpExpiryTime - (currentTime - otpSentTime) : otpExpiryTime;
  
      if (timeLeft <= 0) {
        const resendOtp = await Swal.fire({
          icon: 'warning',
          title: '‚ö†Ô∏è OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß',
          text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á OTP ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          confirmButtonText: '‡∏™‡πà‡∏á OTP ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
          showCancelButton: true,
          customClass: {
            popup: 'otp-popup',
            confirmButton: 'otp-popup-confirm-btn',
            cancelButton: 'otp-popup-cancel-btn',
          }
        });
  
        if (resendOtp.isConfirmed) {
          const resendSuccess = await sendOtp();
          if (!resendSuccess) return; // ‚õî ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á OTP ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          continue;
        } else {
          navigate('/login');
          return;
        }
      }
  
      const { value: otp, dismiss } = await Swal.fire({
        title: '<strong class="otp-swal-title">üìß ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP</strong>',
        input: 'text',
        inputPlaceholder: '‡∏£‡∏´‡∏±‡∏™ OTP 6 ‡∏´‡∏•‡∏±‡∏Å',
        showCancelButton: true,
        confirmButtonText: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP',
        cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        footer: `<span>OTP ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${Math.floor(timeLeft / 60000)} ‡∏ô‡∏≤‡∏ó‡∏µ ${Math.floor((timeLeft % 60000) / 1000)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span>`,
        inputAttributes: { maxlength: 6, autocapitalize: 'off', autocorrect: 'off', style: 'text-align:center;font-size:18px;' },
        customClass: {
          popup: 'otp-popup',
          input: 'otp-popup-input',
          confirmButton: 'otp-popup-confirm-btn',
          cancelButton: 'otp-popup-cancel-btn',
        },
        preConfirm: (otpValue) => {
          if (!otpValue || !/^\d{6}$/.test(otpValue)) {
            Swal.showValidationMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å OTP ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 6 ‡∏´‡∏•‡∏±‡∏Å');
          }
          return otpValue;
        },
      });
  
      if (dismiss === Swal.DismissReason.cancel || dismiss === Swal.DismissReason.close) {
        Swal.fire('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Login', 'info')
          .then(() => navigate('/login'));
        return;
      }
  
      try {
        await axios.post('http://localhost:4000/api/auth/verify-otp', { email: formData.email, otp });
        otpVerified = true;
      } catch (error) {
        Swal.fire('OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å OTP ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'error');
      }
    }
  
    Swal.fire({ title: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å...", allowOutsideClick: false, didOpen: () => Swal.showLoading() });
  
    try {
      const response = await axios.post("http://localhost:4000/api/business/register", formData);
    
      const { token } = response.data;
      if (token) {
        localStorage.setItem("token", token); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token
      }
    
      Swal.fire('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß', 'success')
        .then(() => navigate("/RegisterArena"));
    } catch (error) {
      Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error.response?.data?.message || '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'error');
    }
    
  };
  
  


  return (
    <>
      <div className="registration-container1">
        <header className="registration-header1">
          <h1>
            <img
              src={logo}
              alt="MatchWeb Logo"
              style={{ height: "40px", verticalAlign: "middle", marginRight: "10px" }}
            />
            MatchWeb
          </h1>
          <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£</p>

        </header>
        <main className="registration-content1">
          <h2>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£</h2>
          <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</p>
          <form className="registration-form1" onSubmit={handleSubmit}>
            <div className="form-group">
              <label>
                ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô *
                {errors.idCard && <span className="error-message">{errors.idCard}</span>}

                <input
                  type="text"
                  name="idCard"
                  value={formData.idCard}
                  onChange={handleChange}
                  maxLength="13"  // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 13 ‡∏ï‡∏±‡∏ß
                  pattern="\d*"   // ‚úÖ ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å"
                />
              </label>

              <label>
                ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á * {errors.firstName && <span className="error-message">{errors.firstName}</span>}
                <input type="text" name="firstName" value={formData.firstName} onChange={handleChange} />
              </label>

              <label>
                ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• * {errors.lastName && <span className="error-message">{errors.lastName}</span>}
                <input type="text" name="lastName" value={formData.lastName} onChange={handleChange} />
              </label>

              <label>
                ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î * {errors.dob && <span className="error-message">{errors.dob}</span>}
                <input type="date" name="dob" value={formData.dob} max={getCurrentDate()} onChange={handleChange} />
              </label>
            </div>

            <div className="form-group">
              <label>
                ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ * {errors.phoneNumber && <span className="error-message">{errors.phoneNumber}</span>}
                <input type="text" name="phoneNumber" value={formData.phoneNumber} maxLength="10" inputMode="numeric" onChange={handleChange} />
              </label>

              <label>
                ‡∏≠‡∏µ‡πÄ‡∏°‡∏• * {errors.email && <span className="error-message">{errors.email}</span>}
                <input type="email" name="email" value={formData.email} onChange={handleChange} />
              </label>

              {/* ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô */}
              <label className="password-label">
                ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô * {errors.password && <span className="error-message">{errors.password}</span>}
              </label>

              <div className="password-container">
                <input
                  type={showPassword ? "text" : "password"}  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á "text" ‡πÅ‡∏•‡∏∞ "password"
                  name="password"
                  value={formData.password}
                  onChange={handleChange}
                />
                <button
                  type="button"
                  className="toggle-password-aeye"
                  onClick={() => setShowPassword(!showPassword)}
                >
                </button>
              </div>

              {/* ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô */}
              <label>
                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô * {errors.confirmPassword && <span className="error-message">{errors.confirmPassword}</span>}
              </label>
              <input
                type={showPassword ? "text" : "password"}  // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
                name="confirmPassword"
                value={formData.confirmPassword}
                onChange={handleChange}
              />
            </div>

            <div className="form-terms">
              <label>
                <input
                  type="checkbox"
                  name="acceptTerms"
                  checked={formData.acceptTerms}
                  onChange={handleChange}
                />
                <span className="accept-text">‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö</span>
                <Link to="/OperaRequri" className="highlight-conditions"> ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</Link>
              </label>
              {errors.acceptTerms && <span className="error-message">{errors.acceptTerms}</span>}
            </div>


            
              <button type="submit" className="submit-button-rehere">‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠</button>
            
          </form>
        </main>
      </div>
    </>
  );
};

export default RegistrationForm;
