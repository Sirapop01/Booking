import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import "./ReviewPage.css";
import Slider from "react-slick";
import Swal from "sweetalert2";
import { FaStar } from "react-icons/fa";
import Navbar from "../Navbar/Navbar";
const API_URL = "http://localhost:4000/api"; // ‚úÖ URL Backend

const ReviewPage = () => {
    const { stadiumId } = useParams(); // ‚úÖ ‡∏î‡∏∂‡∏á stadiumId ‡∏à‡∏≤‡∏Å URL
    const [stadium, setStadium] = useState(null);
    const [reviews, setReviews] = useState([]); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
    const [rating, setRating] = useState(0);
    const [comment, setComment] = useState("");
    const [isLoading, setIsLoading] = useState(true);
    const [message, setMessage] = useState("");
    const reviewRef = useRef(null); // ‚úÖ ‡πÉ‡∏ä‡πâ Ref ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    const [selectedRating, setSelectedRating] = useState(0);
    const [filteredReviews, setFilteredReviews] = useState([]);
    const [canReview, setCanReview] = useState(false); // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

    
    const filterReviewsByRating = (rating) => {
        setSelectedRating(rating);
    
        if (rating === 0) {
            setFilteredReviews(reviews);
            return;
        }
    
        const filtered = reviews.filter((review) => review.rating === rating);
        setFilteredReviews(filtered);
    };
    
    console.log("üìå stadiumId:", stadiumId);

    useEffect(() => {
        if (stadiumId) {
            fetchStadiumReviews();
        }
    }, [stadiumId]);

    useEffect(() => {
        if (!isLoading && reviewRef.current) {
            reviewRef.current.scrollIntoView({ behavior: "smooth" }); // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        }
    }, [isLoading]);

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
    const fetchStadiumReviews = async () => {
        try {
            setIsLoading(true);
            console.log("üì° Fetching stadium & reviews from:", `${API_URL}/reviews/${stadiumId}`);
    
            const response = await axios.get(`${API_URL}/reviews/${stadiumId}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem("token") || sessionStorage.getItem("token")}` }
            });
    
            console.log("üìå Stadium & Reviews Data:", response.data);
    
            setStadium(response.data.stadium);
            setReviews(response.data.reviews || []);
            setFilteredReviews(response.data.reviews || []);
    
            // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ `bookingStatus` ‡∏à‡∏≤‡∏Å API ‡πÅ‡∏ó‡∏ô `stadium.userBookingStatus`
            if (response.data.bookingStatus === "paid" || response.data.bookingStatus === "confirmed") {
                setCanReview(true);
            } else {
                setCanReview(false);
            }
        } catch (error) {
            console.error("üö® Error fetching stadium & reviews:", error.response?.data || error.message);
        } finally {
            setIsLoading(false);
        }
    };
    
    
    

    const submitReview = async () => {
        if (!rating) {
            Swal.fire({
                title: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
                text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
                icon: "warning",
                confirmButtonColor: "#3085d6",
                confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
            });
            return;
        }
    
        try {
            const token = localStorage.getItem("token") || sessionStorage.getItem("token");
            if (!token) {
                Swal.fire({
                    title: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
                    text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
                    icon: "error",
                    confirmButtonColor: "#3085d6",
                    confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
                });
                return;
            }
    
            const reviewData = { 
                stadiumId, 
                rating, 
                comment: comment.trim() || ""  // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ comment ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á ""
            };
    
            await axios.post(`${API_URL}/reviews`, reviewData, {
                headers: { Authorization: `Bearer ${token}` }
            });
    
            Swal.fire({
                title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                text: "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!",
                icon: "success",
                confirmButtonColor: "#3085d6",
                confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
            });
    
            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï State ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà)
            setReviews((prevReviews) => [
                ...prevReviews, 
                { 
                    _id: Date.now().toString(), 
                    userId: { firstName: "‡∏Ñ‡∏∏‡∏ì", lastName: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" },
                    rating,
                    comment: comment.trim() || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô"
                }
            ]);
    
            // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
            setRating(0);
            setComment("");
    
        } catch (error) {
            console.error("üö® Error submitting review:", error);
            Swal.fire({
                title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                text: error.response?.data?.message || "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ",
                icon: "error",
                confirmButtonColor: "#d33",
                confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
            });
        }
    };
    
    
    

    

    const reviewSliderSettings = {
        dots: true,
        infinite: false,
        speed: 500,
        slidesToShow: 2,
        slidesToScroll: 1,
        autoplay: false,
        arrows: true,
    };
    
    

    return (
    
        <div className="review-page-container">
            <Navbar />
            <h1 className="review-title87">üèüÔ∏è ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏ô‡∏≤‡∏°</h1>
    
            {isLoading ? (
                <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
            ) : stadium ? (
                <div>
                    {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏ô‡∏≤‡∏° */}
                    <div className="review-stadium-image-container">
                        <img 
                            src={stadium.images?.length > 0 ? stadium.images[0] : "https://via.placeholder.com/300"}
                            alt={stadium.fieldName}
                            className="review-stadium-image"
                        />
                    </div>
    
                    <h2>{stadium.fieldName}</h2> 
                    <p><strong>‡πÄ‡∏õ‡∏¥‡∏î:</strong> {stadium.startTime} - {stadium.endTime}</p>
    
                    <div ref={reviewRef}></div>
                    <div className="review-filter55">
                        <button className={selectedRating === 0 ? "active" : ""} onClick={() => filterReviewsByRating(0)}>
                            ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                        </button>
                        {[1, 2, 3, 4, 5].map((star) => (
                            <button
                                key={star}
                                className={selectedRating === star ? "active" : ""}
                                onClick={() => filterReviewsByRating(star)}
                            >
                                {[...Array(star)].map((_, index) => (
                                    <FaStar key={index} className="star-filter" />
                                ))}
                            </button>
                        ))}
                    </div>
    
                    {/* ‚úÖ Slider ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß */}
                    <h3 className="review-title3">‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h3>
                    {filteredReviews.length > 0 ? (
                        <Slider {...reviewSliderSettings} className="review-slider">
                            {filteredReviews.map((review) => (
                                <div key={review._id} className="review-slide">
                                    <p className="review-user">{review.userId?.firstName || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠"} {review.userId?.lastName || ""}</p>
                                    <p className="review-rating">‚≠ê {review.rating}</p>
                                    <p className="review-comment">{review.comment}</p>
                                    <p className="review-date">
                                        üóìÔ∏è {new Date(review.createdAt).toLocaleDateString("th-TH", {
                                            day: "2-digit",
                                            month: "long",
                                            year: "numeric",
                                        })}
                                    </p>
                                </div>
                            ))}
                        </Slider>
                    ) : (
                        <p className="review-no-reviews">‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</p>
                    )}
    
                    {/* ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà */}
                   {/* ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà */}
{canReview ? (
    <div>
        <div className="review-rating-section">
            <p>‚≠ê ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:</p>
            {[1, 2, 3, 4, 5].map((star) => (
                <span
                    key={star}
                    className={`review-star ${star <= rating ? "active" : ""}`}
                    onClick={() => setRating(star)}
                >
                    ‚òÖ
                </span>
            ))}
        </div>
        <div className="review-form-container">
            <textarea
                className="review-textarea"
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
                value={comment}
                onChange={(e) => setComment(e.target.value)}
            ></textarea>

            <button className="review-submit-button" onClick={submitReview}>
                ‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
            </button>
        </div>
    </div>
) : (
    <p className="review-no-permission">
        ‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß' , '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß'  ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    </p>
)}

                </div>
            ) : (
                <p>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°</p>
            )}
    
            {message && <div className="review-message">{message}</div>}
        </div>
    
    );
    
    
};

export default ReviewPage;
