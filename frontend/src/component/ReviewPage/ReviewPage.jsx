import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import "./ReviewPage.css";

const API_URL = "http://localhost:4000/api"; // ‚úÖ URL Backend

const ReviewPage = () => {
    const { stadiumId } = useParams(); // ‚úÖ ‡∏î‡∏∂‡∏á stadiumId ‡∏à‡∏≤‡∏Å URL
    const [stadium, setStadium] = useState(null);
    const [reviews, setReviews] = useState([]); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
    const [rating, setRating] = useState(0);
    const [comment, setComment] = useState("");
    const [isLoading, setIsLoading] = useState(true);
    const [message, setMessage] = useState("");
    const reviewRef = useRef(null); // ‚úÖ ‡πÉ‡∏ä‡πâ Ref ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

    console.log("üìå stadiumId:", stadiumId);

    useEffect(() => {
        if (stadiumId) {
            fetchStadiumReviews();
        }
    }, [stadiumId]);

    useEffect(() => {
        if (!isLoading && reviewRef.current) {
            reviewRef.current.scrollIntoView({ behavior: "smooth" }); // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        }
    }, [isLoading]);

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
    const fetchStadiumReviews = async () => {
        try {
            setIsLoading(true);
            console.log("üì° Fetching stadium & reviews from:", `${API_URL}/reviews/${stadiumId}`);

            const response = await axios.get(`${API_URL}/reviews/${stadiumId}`);
            console.log("üìå Stadium & Reviews Data:", response.data);

            setStadium(response.data.stadium); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°
            setReviews(response.data.reviews || []); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
        } catch (error) {
            console.error("üö® Error fetching stadium & reviews:", error.response?.data || error.message);
        } finally {
            setIsLoading(false);
        }
    };

    const submitReview = async () => {
        if (!stadium || rating === 0 || comment.trim() === "") {
            alert("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á");
            return;
        }
    
        try {
            const token = localStorage.getItem("token") || sessionStorage.getItem("token");
            if (!token) {
                alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß");
                return;
            }
    
            const reviewData = { stadiumId, rating, comment };
    
            await axios.post(`${API_URL}/reviews`, reviewData, {
                headers: { Authorization: `Bearer ${token}` }
            });
    
            setMessage("‚úÖ ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
            setTimeout(() => setMessage(""), 3000);
    
            // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
            setRating(0);
            setComment("");
    
            // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            fetchStadiumReviews();
        } catch (error) {
            console.error("üö® Error submitting review:", error);
            alert(error.response?.data?.message || "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ");
        }
    };
    
    

    return (
        <div className="review-container">
            <h1>üèüÔ∏è ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏ô‡∏≤‡∏°</h1>
    
            {isLoading ? (
                <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
            ) : stadium ? (
                <div>
                    {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏ô‡∏≤‡∏° */}
                    <div className="stadium-image-container">
                        <img 
                            src={stadium.images?.length > 0 ? stadium.images[0] : "https://via.placeholder.com/300"}
                            alt={stadium.fieldName}
                            className="stadium-image"
                        />
                    </div>
    
                    <h2>{stadium.fieldName}</h2> {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏° */}
                    <p><strong>‡πÄ‡∏õ‡∏¥‡∏î:</strong> {stadium.startTime} - {stadium.endTime}</p> {/* ‚úÖ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î */}
    
                    {/* ‚úÖ ‡πÉ‡∏ä‡πâ Ref ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß */}
                    <div ref={reviewRef}></div>
    
                    <h3>‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h3>
                    {reviews.length > 0 ? (
                        reviews.map((review) => (
                            <div key={review._id} className="review-item">
                                <p><strong>{review.userId?.firstName || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠"} {review.userId?.lastName || ""}</strong></p>
                                <p>‚≠ê {review.rating}</p>
                                <p>{review.comment}</p>
                            </div>
                        ))
                    ) : (
                        <p>‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</p>
                    )}
    
                    <div className="rating-section">
                        <p>‚≠ê ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:</p>
                        {[1, 2, 3, 4, 5].map((star) => (
                            <span
                                key={star}
                                className={`star ${star <= rating ? "active" : ""}`}
                                onClick={() => setRating(star)}
                            >
                                ‚òÖ
                            </span>
                        ))}
                    </div>
    
                    <textarea
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                    ></textarea>
    
                    <button className="submit-button" onClick={submitReview}>
                        ‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
                    </button>
                </div>
            ) : (
                <p>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°</p>
            )}
    
            {message && <div className="review-message">{message}</div>}
        </div>
    );
    
};

export default ReviewPage;
