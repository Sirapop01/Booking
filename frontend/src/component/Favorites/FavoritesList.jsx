import React, { useState, useEffect } from "react";
import { jwtDecode } from "jwt-decode";
import { useParams, useNavigate } from "react-router-dom"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° useParams
import axios from "axios";
import { FaHeart } from "react-icons/fa";
import Navbar from "../Navbar/Navbar";
import "./FavoriteList.css";
import Swal from "sweetalert2";

const FavoritePage = () => {
  const { id } = useParams(); // ‚úÖ ‡∏£‡∏±‡∏ö stadiumId ‡∏à‡∏≤‡∏Å URL
  const navigate = useNavigate();
  const [decodedToken, setDecodedToken] = useState(null);
  const [loading, setLoading] = useState(true);
  const [favorites, setFavorites] = useState([]);
  const [selectedFavorite, setSelectedFavorite] = useState(null); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

  useEffect(() => {
    const storedToken = localStorage.getItem("token") || sessionStorage.getItem("token");
    if (storedToken) {
      try {
        const decoded = jwtDecode(storedToken);
        setDecodedToken(decoded);
      } catch (error) {
        console.error("‚ö†Ô∏è Error decoding token:", error);
      }
    }
    setLoading(false);
  }, []);

  useEffect(() => {
    if (!decodedToken) return;

    const fetchFavorites = async () => {
      try {
        const response = await axios.get(
          `http://localhost:4000/api/favoritearena?userId=${decodedToken.id}`
        );

        const updatedFavorites = response.data.map((favorite) => ({
          ...favorite,
          liked: true,
        }));

        setFavorites(updatedFavorites);

        // ‚úÖ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ stadiumId ‡πÉ‡∏ô URL ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        if (id) {
          const foundFavorite = updatedFavorites.find(fav => fav.stadiumId === id);
          setSelectedFavorite(foundFavorite);
        }
      } catch (error) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î:", error);
      }
    };

    fetchFavorites();
  }, [decodedToken, id]); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏° `id`

  const toggleFavorite = async (stadiumId) => {
    if (!decodedToken?.id) {
      Swal.fire({
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö!",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î",
        icon: "warning",
        confirmButtonColor: "#3085d6",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
      return;
    }
  
    if (!stadiumId) {
      console.error("‚ùå stadiumId is undefined!");
      return;
    }
  
    console.log("üìå Toggling favorite for stadiumId:", stadiumId);
  
    try {
      const isFavorite = favorites.some(fav => fav.stadiumId === stadiumId);
  
      if (isFavorite) {
        // üîΩ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
        await axios.delete(`http://localhost:4000/api/favoritearena/${stadiumId}?userId=${decodedToken.id}`);
  
        setFavorites(prevFavorites => prevFavorites.filter(item => item.stadiumId !== stadiumId));
  
        Swal.fire({
          title: "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
          text: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß",
          icon: "success",
          confirmButtonColor: "#3085d6",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        });
  
        if (selectedFavorite?.stadiumId === stadiumId) {
          setSelectedFavorite(null);
          navigate("/FavoritesList"); // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        }
      } else {
        // üîΩ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
        await axios.post("http://localhost:4000/api/favoritearena", 
          { userId: decodedToken.id, stadiumId },
          { headers: { "Content-Type": "application/json" } }
        );
  
        setFavorites(prevFavorites => [...prevFavorites, { stadiumId, liked: true }]);
  
        Swal.fire({
          title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
          text: "‡∏™‡∏ô‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß",
          icon: "success",
          confirmButtonColor: "#3085d6",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        });
      }
    } catch (error) {
      console.error("‚ùå Error toggling favorite:", error.response ? error.response.data : error);
  
      Swal.fire({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏î‡πâ",
        icon: "error",
        confirmButtonColor: "#d33",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
    }
  };
  

  if (loading) return <div>Loading...</div>;

  return (
    <div className="favorite-page">
      <Navbar />
      <h1 className="favorite-title">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î</h1>
  
      {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° container ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö */}
      <div className="favorite-container">
        <div className="favorite-list-container">
          {favorites.length > 0 ? (
            favorites.map((favorite) => (
              <div 
                className="favorite-card" 
                key={favorite._id} 
                onClick={() => navigate(`/BookingArena/${favorite.stadiumId}`)}
              >
                <div className="favorite-details">
                  <div className="left">
                    <FaHeart
                      className={`heart-icon ${favorite.liked ? "liked" : ""}`}
                      onClick={(e) => {
                        e.stopPropagation(); // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
                        toggleFavorite(favorite.stadiumId);
                      }}
                    />
                    <h2>{favorite.fieldName}</h2>
                  </div>
                  <div className="favorite-image">
                    <img src={favorite.stadiumImage || "https://via.placeholder.com/150"} alt={favorite.fieldName} />
                  </div>
                  <p><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°:</strong> {new Date(favorite.createdAt).toLocaleDateString()}  (‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)</p>
                </div>
              </div>
            ))
          ) : (
            <p className="no-favorites">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</p>
          )}
        </div>
      </div>
    </div>
  );
  
};

export default FavoritePage;
